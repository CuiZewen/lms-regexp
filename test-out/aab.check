/*****************************************
  Emitting Generated Code                  
*******************************************/
class Match extends ((Unit)=>(scala.virtualization.lms.regexp.Automaton[Char, Byte])) {
def apply(x0:Unit): scala.virtualization.lms.regexp.Automaton[Char, Byte] = {
var x13 = null.asInstanceOf[scala.virtualization.lms.regexp.Automaton[Char, Byte]]
var x1 = null.asInstanceOf[scala.Function1[Char, scala.virtualization.lms.regexp.Automaton[Char, Byte]]]
var x17 = null.asInstanceOf[scala.virtualization.lms.regexp.Automaton[Char, Byte]]
var x4 = null.asInstanceOf[scala.Function1[Char, scala.virtualization.lms.regexp.Automaton[Char, Byte]]]
var x10 = null.asInstanceOf[scala.virtualization.lms.regexp.Automaton[Char, Byte]]
var x7 = null.asInstanceOf[scala.Function1[Char, scala.virtualization.lms.regexp.Automaton[Char, Byte]]]
var x12 = null.asInstanceOf[scala.virtualization.lms.regexp.Automaton[Char, Byte]]
x1 = {x2: (Char) => 
val x3 = x2 == 'A'
val x18 = if (x3) {
x17
} else {
x13
}
x18
}
x12 = scala.virtualization.lms.regexp.Automaton(1.toByte,x1)
x7 = {x8: (Char) => 
val x9 = x8 == 'A'
val x15 = if (x9) {
x10
} else {
val x11 = x8 == 'B'
val x14 = if (x11) {
x12
} else {
x13
}
x14
}
x15
}
x10 = scala.virtualization.lms.regexp.Automaton(0.toByte,x7)
x4 = {x5: (Char) => 
val x6 = x5 == 'A'
val x16 = if (x6) {
x10
} else {
x13
}
x16
}
x17 = scala.virtualization.lms.regexp.Automaton(0.toByte,x4)
x13 = scala.virtualization.lms.regexp.Automaton(0.toByte,x1)
x13
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
// idx:   0
// out:   false
// char:  X
// idx:   1
// out:   false
// char:  A
// idx:   2
// out:   false
// char:  B
// idx:   3
// out:   false
// char:  Z
// idx:   4
// out:   false
// char:  A
// idx:   5
// out:   false
// char:  A
// idx:   6
// out:   false
// char:  B
// idx:   7
// out:   true
// char:  W
// idx:   8
// out:   false
// char:  A
// idx:   9
// out:   false
// char:  A
// idx:   10
// out:   false
// char:  A
// idx:   11
// out:   false
// char:  A
// idx:   12
// out:   false
// char:  B
// idx:   13
// out:   true
// char:  Q
// idx:   14
// out:   false
