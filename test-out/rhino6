qqqq|qqq|qq|q|ZZZZ|ZZZ|ZZ|Z|llll|ll|l|uu|u|UU|U|zz|z|ff|f|gg|g|sss|ss|s|mmm|mm|m @ qqqq, ZZZ q, llll
REGlobalData(0,4 / null)/qqqq
----qqqq|qqq|qq|q|ZZZZ|ZZZ|ZZ|Z|llll|ll|l|uu|u|UU|U|zz|z|ff|f|gg|g|sss|ss|s|mmm|mm|m
/*****************************************
  Emitting Generated Code                  
*******************************************/
import scala.virtualization.lms.regexp.backtrack._
import RhinoMatcher.matcher
class staged$5 extends ((Unit)=>(Boolean)) {
def apply(x0:Unit): Boolean = {
val x3 = matcher.gData
val x4 = x3.cp
val x5 = matcher.input
val x6 = x5.length
val x7 = RhinoMatchUtil.flatNMatcher(x3,0,4,x5,x6) // qqqq
val x271 = if (x7) {
true
} else {
val x10 = x3.cp
val x11 = RhinoMatchUtil.flatNMatcher(x3,5,3,x5,x6) // qqq
val x269 = if (x11) {
true
} else {
val x14 = x3.cp
val x15 = RhinoMatchUtil.flatNMatcher(x3,9,2,x5,x6) // qq
val x267 = if (x15) {
true
} else {
val x18 = x3.cp
val x19 = x3.cp
val x21 = x19 == x6
val x30 = if (x21) {
false
} else {
val x22 = x3.cp
val x23 = x5.charAt(x22)
val x24 = 'q' == x23
val x25 = if (x24) {
true
} else {
x24
}
val x28 = if (x25) {
val x26 = x3.cp += 1
true
} else {
false
}
x28
}
val x265 = if (x30) {
true
} else {
val x33 = x3.cp
val x34 = RhinoMatchUtil.flatNMatcher(x3,14,4,x5,x6) // ZZZZ
val x263 = if (x34) {
true
} else {
val x37 = x3.cp
val x38 = RhinoMatchUtil.flatNMatcher(x3,19,3,x5,x6) // ZZZ
val x261 = if (x38) {
true
} else {
val x41 = x3.cp
val x42 = RhinoMatchUtil.flatNMatcher(x3,23,2,x5,x6) // ZZ
val x259 = if (x42) {
true
} else {
val x45 = x3.cp
val x46 = x3.cp
val x48 = x46 == x6
val x57 = if (x48) {
false
} else {
val x49 = x3.cp
val x50 = x5.charAt(x49)
val x51 = 'Z' == x50
val x52 = if (x51) {
true
} else {
x51
}
val x55 = if (x52) {
val x53 = x3.cp += 1
true
} else {
false
}
x55
}
val x257 = if (x57) {
true
} else {
val x60 = x3.cp
val x61 = RhinoMatchUtil.flatNMatcher(x3,28,4,x5,x6) // llll
val x255 = if (x61) {
true
} else {
val x64 = x3.cp
val x65 = RhinoMatchUtil.flatNMatcher(x3,33,2,x5,x6) // ll
val x253 = if (x65) {
true
} else {
val x68 = x3.cp
val x69 = x3.cp
val x71 = x69 == x6
val x80 = if (x71) {
false
} else {
val x72 = x3.cp
val x73 = x5.charAt(x72)
val x74 = 'l' == x73
val x75 = if (x74) {
true
} else {
x74
}
val x78 = if (x75) {
val x76 = x3.cp += 1
true
} else {
false
}
x78
}
val x251 = if (x80) {
true
} else {
val x83 = x3.cp
val x84 = RhinoMatchUtil.flatNMatcher(x3,38,2,x5,x6) // uu
val x249 = if (x84) {
true
} else {
val x87 = x3.cp
val x88 = x3.cp
val x90 = x88 == x6
val x99 = if (x90) {
false
} else {
val x91 = x3.cp
val x92 = x5.charAt(x91)
val x93 = 'u' == x92
val x94 = if (x93) {
true
} else {
x93
}
val x97 = if (x94) {
val x95 = x3.cp += 1
true
} else {
false
}
x97
}
val x247 = if (x99) {
true
} else {
val x102 = x3.cp
val x103 = RhinoMatchUtil.flatNMatcher(x3,43,2,x5,x6) // UU
val x245 = if (x103) {
true
} else {
val x106 = x3.cp
val x107 = x3.cp
val x109 = x107 == x6
val x118 = if (x109) {
false
} else {
val x110 = x3.cp
val x111 = x5.charAt(x110)
val x112 = 'U' == x111
val x113 = if (x112) {
true
} else {
x112
}
val x116 = if (x113) {
val x114 = x3.cp += 1
true
} else {
false
}
x116
}
val x243 = if (x118) {
true
} else {
val x121 = x3.cp
val x122 = RhinoMatchUtil.flatNMatcher(x3,48,2,x5,x6) // zz
val x241 = if (x122) {
true
} else {
val x125 = x3.cp
val x126 = x3.cp
val x128 = x126 == x6
val x137 = if (x128) {
false
} else {
val x129 = x3.cp
val x130 = x5.charAt(x129)
val x131 = 'z' == x130
val x132 = if (x131) {
true
} else {
x131
}
val x135 = if (x132) {
val x133 = x3.cp += 1
true
} else {
false
}
x135
}
val x239 = if (x137) {
true
} else {
val x140 = x3.cp
val x141 = RhinoMatchUtil.flatNMatcher(x3,53,2,x5,x6) // ff
val x237 = if (x141) {
true
} else {
val x144 = x3.cp
val x145 = x3.cp
val x147 = x145 == x6
val x156 = if (x147) {
false
} else {
val x148 = x3.cp
val x149 = x5.charAt(x148)
val x150 = 'f' == x149
val x151 = if (x150) {
true
} else {
x150
}
val x154 = if (x151) {
val x152 = x3.cp += 1
true
} else {
false
}
x154
}
val x235 = if (x156) {
true
} else {
val x159 = x3.cp
val x160 = RhinoMatchUtil.flatNMatcher(x3,58,2,x5,x6) // gg
val x233 = if (x160) {
true
} else {
val x163 = x3.cp
val x164 = x3.cp
val x166 = x164 == x6
val x175 = if (x166) {
false
} else {
val x167 = x3.cp
val x168 = x5.charAt(x167)
val x169 = 'g' == x168
val x170 = if (x169) {
true
} else {
x169
}
val x173 = if (x170) {
val x171 = x3.cp += 1
true
} else {
false
}
x173
}
val x231 = if (x175) {
true
} else {
val x178 = x3.cp
val x179 = RhinoMatchUtil.flatNMatcher(x3,63,3,x5,x6) // sss
val x229 = if (x179) {
true
} else {
val x182 = x3.cp
val x183 = RhinoMatchUtil.flatNMatcher(x3,67,2,x5,x6) // ss
val x227 = if (x183) {
true
} else {
val x186 = x3.cp
val x187 = x3.cp
val x189 = x187 == x6
val x198 = if (x189) {
false
} else {
val x190 = x3.cp
val x191 = x5.charAt(x190)
val x192 = 's' == x191
val x193 = if (x192) {
true
} else {
x192
}
val x196 = if (x193) {
val x194 = x3.cp += 1
true
} else {
false
}
x196
}
val x225 = if (x198) {
true
} else {
val x201 = x3.cp
val x202 = RhinoMatchUtil.flatNMatcher(x3,72,3,x5,x6) // mmm
val x223 = if (x202) {
true
} else {
val x205 = x3.cp
val x206 = RhinoMatchUtil.flatNMatcher(x3,76,2,x5,x6) // mm
val x221 = if (x206) {
true
} else {
val x207 = x3.cp
val x208 = x3.cp
val x210 = x208 == x6
val x219 = if (x210) {
false
} else {
val x211 = x3.cp
val x212 = x5.charAt(x211)
val x213 = 'm' == x212
val x214 = if (x213) {
true
} else {
x213
}
val x217 = if (x214) {
val x215 = x3.cp += 1
true
} else {
false
}
x217
}
x219
}
x221
}
x223
}
x225
}
x227
}
x229
}
x231
}
x233
}
x235
}
x237
}
x239
}
x241
}
x243
}
x245
}
x247
}
x249
}
x251
}
x253
}
x255
}
x257
}
x259
}
x261
}
x263
}
x265
}
x267
}
x269
}
x271
}
}
/*****************************************
  End of Generated Code                  
*******************************************/

compilation: ok
---- took 1003ms
REGlobalData(0,4 / null)/qqqq
done
