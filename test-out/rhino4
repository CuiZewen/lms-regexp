(((\w+):\/\/)([^\/:]*)(:(\d+))?)?([^#?]*)(\?([^#]*))?(#(.*))? @ uggc://jjj.snprobbx.pbz/ybtva.cuc
REGlobalData(0,33 / (23,0),(7,0),(4,0),(16,7),(-1,-1),(-1,-1),(10,23),(-1,-1),(-1,-1),(-1,-1),(-1,-1))/uggc://jjj.snprobbx.pbz/ybtva.cuc,uggc://jjj.snprobbx.pbz,uggc://,uggc,jjj.snprobbx.pbz,,,/ybtva.cuc,,,,
----(((\w+):\/\/)([^\/:]*)(:(\d+))?)?([^#?]*)(\?([^#]*))?(#(.*))?
/*****************************************
  Emitting Generated Code                  
*******************************************/
import scala.virtualization.lms.regexp._
import RhinoMatcher.matcher
class staged$3(px446:scala.virtualization.lms.regexp.RECharSet,px214:scala.virtualization.lms.regexp.RECharSet,px170:scala.virtualization.lms.regexp.RECharSet) extends ((Unit)=>(Boolean)) {
def apply(x0:Unit): Boolean = {
val x1 = matcher.gData
val x31 = matcher.input
val x32 = x31.length
val x2 = if (x1.parens == null) null else x1.parens.clone //copy
val x3 = x1.cp
val x241 = if (x1.parens == null) null else x1.parens.clone //copy
val x242 = x1.cp
val x243 = x1.cp
val x244 = if (x1.parens == null) null else x1.parens.clone //copy
val x245 = x1.cp
val x246 = x1.cp
val x247 = if (x1.parens == null) null else x1.parens.clone //copy
val x248 = x1.cp
val x249 = x1.cp
val x446 = px446 // static data: RECharSet(59,15)
val x214 = px214 // static data: RECharSet(64,35)
val x170 = px170 // static data: RECharSet(36,46)
def x12(): Boolean = {
val x25 = if (x1.parens == null) null else x1.parens.clone //copy
val x26 = x1.cp
val x27 = x1.cp
val x28 = if (x1.parens == null) null else x1.parens.clone //copy
val x29 = x1.cp
val x30 = x1.cp
val x34 = x30 == x32
val x43 = if (x34) {
false
} else {
val x35 = x1.cp
val x36 = x31.charAt(x35)
val x37 = '#' == x36
val x38 = if (x37) {
true
} else {
x37
}
val x41 = if (x38) {
val x39 = x1.cp += 1
true
} else {
false
}
x41
}
def x50(): Boolean = {
val x52 = x1.cp
val x53 = x52 - x27
val x54 = x1.setParens(9,x27,x53)
true
}
def x63(): Boolean = {
val x66 = x1.cp = x26
val x67 = x1.parens = x25
true
}
val x108 = if (x43) {
val x44 = x1.cp
def x45(): Boolean = {
val x47 = x1.cp
val x48 = x47 - x44
val x49 = x1.setParens(10,x44,x48)
val x57 = x50()
x57
}
def x73(): Boolean = {
val x75 = if (x1.parens == null) null else x1.parens.clone //copy
val x76 = x1.cp
val x77 = x1.cp
val x79 = x77 == x32
val x85 = if (x79) {
false
} else {
val x80 = x1.cp
val x81 = x31.charAt(x80)
val x82 = Rhino.isLineTerm(x81)
val x83 = !x82
x83
}
val x88 = if (x85) {
val x86 = x1.cp += 1
true
} else {
false
}
val x100 = if (x88) {
val x89 = x73()
val x94 = if (x89) {
true
} else {
val x90 = x1.cp = x76
val x91 = x1.parens = x75
val x92 = x45()
x92
}
x94
} else {
val x96 = x1.cp = x76
val x97 = x1.parens = x75
val x98 = x45()
x98
}
x100
}
val x71 = if (x1.parens == null) null else x1.parens.clone //copy
val x72 = x1.cp
val x102 = x73()
x102
} else {
val x104 = x1.parens = x28
val x105 = x1.cp = x29
val x106 = x63()
x106
}
x108
}
def x4(): Boolean = {
val x6 = x1.cp
def x7(): Boolean = {
val x9 = x1.cp
val x10 = x9 - x6
val x11 = x1.setParens(6,x6,x10)
val x115 = if (x1.parens == null) null else x1.parens.clone //copy
val x116 = x1.cp
val x117 = x1.cp
val x118 = if (x1.parens == null) null else x1.parens.clone //copy
val x119 = x1.cp
val x120 = x1.cp
val x122 = x120 == x32
val x131 = if (x122) {
false
} else {
val x123 = x1.cp
val x124 = x31.charAt(x123)
val x125 = '?' == x124
val x126 = if (x125) {
true
} else {
x125
}
val x129 = if (x126) {
val x127 = x1.cp += 1
true
} else {
false
}
x129
}
def x138(): Boolean = {
val x140 = x1.cp
val x141 = x140 - x117
val x142 = x1.setParens(7,x117,x141)
val x143 = x12()
x143
}
def x151(): Boolean = {
val x153 = x1.cp = x116
val x154 = x1.parens = x115
val x155 = x12()
x155
}
val x196 = if (x131) {
val x132 = x1.cp
def x133(): Boolean = {
val x135 = x1.cp
val x136 = x135 - x132
val x137 = x1.setParens(8,x132,x136)
val x145 = x138()
x145
}
def x161(): Boolean = {
val x163 = if (x1.parens == null) null else x1.parens.clone //copy
val x164 = x1.cp
val x165 = x1.cp
val x167 = x165 == x32
val x173 = if (x167) {
false
} else {
val x168 = x1.cp
val x169 = x31.charAt(x168)
val x171 = RhinoMatchUtil.classMatcher(x1,x170,x169)
x171
}
val x176 = if (x173) {
val x174 = x1.cp += 1
true
} else {
false
}
val x188 = if (x176) {
val x177 = x161()
val x182 = if (x177) {
true
} else {
val x178 = x1.cp = x164
val x179 = x1.parens = x163
val x180 = x133()
x180
}
x182
} else {
val x184 = x1.cp = x164
val x185 = x1.parens = x163
val x186 = x133()
x186
}
x188
}
val x159 = if (x1.parens == null) null else x1.parens.clone //copy
val x160 = x1.cp
val x190 = x161()
x190
} else {
val x192 = x1.parens = x118
val x193 = x1.cp = x119
val x194 = x151()
x194
}
x196
}
def x205(): Boolean = {
val x207 = if (x1.parens == null) null else x1.parens.clone //copy
val x208 = x1.cp
val x209 = x1.cp
val x211 = x209 == x32
val x217 = if (x211) {
false
} else {
val x212 = x1.cp
val x213 = x31.charAt(x212)
val x215 = RhinoMatchUtil.classMatcher(x1,x214,x213)
x215
}
val x220 = if (x217) {
val x218 = x1.cp += 1
true
} else {
false
}
val x232 = if (x220) {
val x221 = x205()
val x226 = if (x221) {
true
} else {
val x222 = x1.cp = x208
val x223 = x1.parens = x207
val x224 = x7()
x224
}
x226
} else {
val x228 = x1.cp = x208
val x229 = x1.parens = x207
val x230 = x7()
x230
}
x232
}
val x203 = if (x1.parens == null) null else x1.parens.clone //copy
val x204 = x1.cp
val x234 = x205()
x234
}
def x304(): Boolean = {
val x306 = x1.cp
val x307 = x306 - x243
val x308 = x1.setParens(0,x243,x307)
val x309 = x4()
x309
}
def x291(): Boolean = {
val x293 = x1.cp
val x294 = x293 - x246
val x295 = x1.setParens(1,x246,x294)
val x296 = x1.cp
def x297(): Boolean = {
val x299 = x1.cp
val x300 = x299 - x296
val x301 = x1.setParens(3,x296,x300)
val x325 = if (x1.parens == null) null else x1.parens.clone //copy
val x326 = x1.cp
val x327 = x1.cp
val x328 = if (x1.parens == null) null else x1.parens.clone //copy
val x329 = x1.cp
val x330 = x1.cp
val x332 = x330 == x32
val x341 = if (x332) {
false
} else {
val x333 = x1.cp
val x334 = x31.charAt(x333)
val x335 = ':' == x334
val x336 = if (x335) {
true
} else {
x335
}
val x339 = if (x336) {
val x337 = x1.cp += 1
true
} else {
false
}
x339
}
def x348(): Boolean = {
val x350 = x1.cp
val x351 = x350 - x327
val x352 = x1.setParens(4,x327,x351)
val x353 = x304()
x353
}
def x361(): Boolean = {
val x363 = x1.cp = x326
val x364 = x1.parens = x325
val x365 = x304()
x365
}
def x357(): Boolean = {
val x359 = x1.parens = x328
val x360 = x1.cp = x329
val x367 = x361()
x367
}
val x427 = if (x341) {
val x342 = x1.cp
def x343(): Boolean = {
val x345 = x1.cp
val x346 = x345 - x342
val x347 = x1.setParens(5,x342,x346)
val x355 = x348()
x355
}
def x382(): Boolean = {
val x384 = if (x1.parens == null) null else x1.parens.clone //copy
val x385 = x1.cp
val x386 = x1.cp
val x388 = x386 == x32
val x393 = if (x388) {
false
} else {
val x389 = x1.cp
val x390 = x31.charAt(x389)
val x391 = Rhino.isDigit(x390)
x391
}
val x396 = if (x393) {
val x394 = x1.cp += 1
true
} else {
false
}
val x408 = if (x396) {
val x397 = x382()
val x402 = if (x397) {
true
} else {
val x398 = x1.cp = x385
val x399 = x1.parens = x384
val x400 = x343()
x400
}
x402
} else {
val x404 = x1.cp = x385
val x405 = x1.parens = x384
val x406 = x343()
x406
}
x408
}
val x369 = if (x1.parens == null) null else x1.parens.clone //copy
val x370 = x1.cp
val x371 = x1.cp
val x373 = x371 == x32
val x378 = if (x373) {
false
} else {
val x374 = x1.cp
val x375 = x31.charAt(x374)
val x376 = Rhino.isDigit(x375)
x376
}
val x381 = if (x378) {
val x379 = x1.cp += 1
true
} else {
false
}
val x421 = if (x381) {
val x410 = x382()
val x415 = if (x410) {
true
} else {
val x411 = x1.cp = x370
val x412 = x1.parens = x369
val x413 = x357()
x413
}
x415
} else {
val x417 = x1.cp = x370
val x418 = x1.parens = x369
val x419 = x357()
x419
}
x421
} else {
val x423 = x1.parens = x328
val x424 = x1.cp = x329
val x425 = x361()
x425
}
x427
}
def x437(): Boolean = {
val x439 = if (x1.parens == null) null else x1.parens.clone //copy
val x440 = x1.cp
val x441 = x1.cp
val x443 = x441 == x32
val x449 = if (x443) {
false
} else {
val x444 = x1.cp
val x445 = x31.charAt(x444)
val x447 = RhinoMatchUtil.classMatcher(x1,x446,x445)
x447
}
val x452 = if (x449) {
val x450 = x1.cp += 1
true
} else {
false
}
val x464 = if (x452) {
val x453 = x437()
val x458 = if (x453) {
true
} else {
val x454 = x1.cp = x440
val x455 = x1.parens = x439
val x456 = x297()
x456
}
x458
} else {
val x460 = x1.cp = x440
val x461 = x1.parens = x439
val x462 = x297()
x462
}
x464
}
val x435 = if (x1.parens == null) null else x1.parens.clone //copy
val x436 = x1.cp
val x466 = x437()
x466
}
def x317(): Boolean = {
val x319 = x1.cp = x242
val x320 = x1.parens = x241
val x321 = x4()
x321
}
def x472(): Boolean = {
val x474 = x1.parens = x244
val x475 = x1.cp = x245
val x476 = x317()
x476
}
def x250(): Boolean = {
val x252 = x1.cp
val x253 = x252 - x249
val x254 = x1.setParens(2,x249,x253)
val x255 = x1.cp
val x257 = x255 == x32
val x266 = if (x257) {
false
} else {
val x258 = x1.cp
val x259 = x31.charAt(x258)
val x260 = ':' == x259
val x261 = if (x260) {
true
} else {
x260
}
val x264 = if (x261) {
val x262 = x1.cp += 1
true
} else {
false
}
x264
}
val x492 = if (x266) {
val x267 = x1.cp
val x269 = x267 == x32
val x278 = if (x269) {
false
} else {
val x270 = x1.cp
val x271 = x31.charAt(x270)
val x272 = '/' == x271
val x273 = if (x272) {
true
} else {
x272
}
val x276 = if (x273) {
val x274 = x1.cp += 1
true
} else {
false
}
x276
}
val x486 = if (x278) {
val x279 = x1.cp
val x281 = x279 == x32
val x290 = if (x281) {
false
} else {
val x282 = x1.cp
val x283 = x31.charAt(x282)
val x284 = '/' == x283
val x285 = if (x284) {
true
} else {
x284
}
val x288 = if (x285) {
val x286 = x1.cp += 1
true
} else {
false
}
x288
}
val x480 = if (x290) {
val x468 = x291()
x468
} else {
val x470 = x1.parens = x247
val x471 = x1.cp = x248
val x478 = x472()
x478
}
x480
} else {
val x482 = x1.parens = x247
val x483 = x1.cp = x248
val x484 = x472()
x484
}
x486
} else {
val x488 = x1.parens = x247
val x489 = x1.cp = x248
val x490 = x472()
x490
}
x492
}
def x513(): Boolean = {
val x515 = if (x1.parens == null) null else x1.parens.clone //copy
val x516 = x1.cp
val x517 = x1.cp
val x519 = x517 == x32
val x524 = if (x519) {
false
} else {
val x520 = x1.cp
val x521 = x31.charAt(x520)
val x522 = Rhino.isWord(x521)
x522
}
val x527 = if (x524) {
val x525 = x1.cp += 1
true
} else {
false
}
val x539 = if (x527) {
val x528 = x513()
val x533 = if (x528) {
true
} else {
val x529 = x1.cp = x516
val x530 = x1.parens = x515
val x531 = x250()
x531
}
x533
} else {
val x535 = x1.cp = x516
val x536 = x1.parens = x515
val x537 = x250()
x537
}
x539
}
val x500 = if (x1.parens == null) null else x1.parens.clone //copy
val x501 = x1.cp
val x502 = x1.cp
val x504 = x502 == x32
val x509 = if (x504) {
false
} else {
val x505 = x1.cp
val x506 = x31.charAt(x505)
val x507 = Rhino.isWord(x506)
x507
}
val x512 = if (x509) {
val x510 = x1.cp += 1
true
} else {
false
}
def x494(): Boolean = {
val x496 = x1.parens = x247
val x497 = x1.cp = x248
val x498 = x472()
x498
}
val x552 = if (x512) {
val x541 = x513()
val x546 = if (x541) {
true
} else {
val x542 = x1.cp = x501
val x543 = x1.parens = x500
val x544 = x494()
x544
}
x546
} else {
val x548 = x1.cp = x501
val x549 = x1.parens = x500
val x550 = x494()
x550
}
x552
}
}
/*****************************************
  End of Generated Code                  
*******************************************/

compilation: ok
---- took 1294ms
REGlobalData(0,33 / (23,0),(7,0),(4,0),(16,7),(-1,-1),(-1,-1),(10,23),(-1,-1),(-1,-1),(-1,-1),(-1,-1))/uggc://jjj.snprobbx.pbz/ybtva.cuc,uggc://jjj.snprobbx.pbz,uggc://,uggc,jjj.snprobbx.pbz,,,/ybtva.cuc,,,,
done
