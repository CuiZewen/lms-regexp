(((\w+):\/\/)([^\/:]*)(:(\d+))?)?([^#?]*)(\?([^#]*))?(#(.*))? @ uggc://jjj.snprobbx.pbz/ybtva.cuc
REGlobalData(0,33 / (23,0),(7,0),(4,0),(16,7),(-1,-1),(-1,-1),(10,23),(-1,-1),(-1,-1),(-1,-1),(-1,-1))/uggc://jjj.snprobbx.pbz/ybtva.cuc,uggc://jjj.snprobbx.pbz,uggc://,uggc,jjj.snprobbx.pbz,,,/ybtva.cuc,,,,
----(((\w+):\/\/)([^\/:]*)(:(\d+))?)?([^#?]*)(\?([^#]*))?(#(.*))?
/*****************************************
  Emitting Generated Code                  
*******************************************/
import scala.virtualization.lms.regexp.backtrack._
import RhinoMatcher.matcher
class staged$3(px365:scala.virtualization.lms.regexp.backtrack.RECharSet,px169:scala.virtualization.lms.regexp.backtrack.RECharSet,px128:scala.virtualization.lms.regexp.backtrack.RECharSet) extends ((Unit)=>(Boolean)) {
def apply(x0:Unit): Boolean = {
val x1 = matcher.gData
val x21 = matcher.input
val x22 = x21.length
val x2 = x1.cp
val x188 = x1.cp
val x189 = x1.cp
val x190 = x1.cp
val x191 = x1.cp
val x192 = x1.cp
val x365 = px365 // static data: RECharSet(59,15)
val x169 = px169 // static data: RECharSet(64,35)
val x128 = px128 // static data: RECharSet(36,46)
def x13(): Boolean = {
val x17 = x1.cp
val x18 = x1.cp
val x19 = x1.cp
val x20 = x1.cp
val x24 = x20 == x22
val x33 = if (x24) {
false
} else {
val x25 = x1.cp
val x26 = x21.charAt(x25)
val x27 = '#' == x26
val x28 = if (x27) {
true
} else {
x27
}
val x31 = if (x28) {
val x29 = x1.cp += 1
true
} else {
false
}
x31
}
val x78 = if (x33) {
val x34 = x1.cp
def x35(): Boolean = {
val x37 = x1.parensIndex(10)
val x38 = x1.parensLength(10)
val x39 = x1.cp
val x40 = x39 - x34
val x41 = x1.setParens(10,x34,x40)
val x42 = x1.parensIndex(9)
val x43 = x1.parensLength(9)
val x44 = x1.cp
val x45 = x44 - x17
val x46 = x1.setParens(9,x17,x45)
true
}
def x48(): Boolean = {
val x50 = x1.cp
val x51 = x1.cp
val x53 = x51 == x22
val x59 = if (x53) {
false
} else {
val x54 = x1.cp
val x55 = x21.charAt(x54)
val x56 = Rhino.isLineTerm(x55)
val x57 = !x56
x57
}
val x62 = if (x59) {
val x60 = x1.cp += 1
true
} else {
false
}
val x68 = if (x62) {
val x63 = x48()
val x66 = if (x63) {
true
} else {
val x64 = x1.cp = x50
false
}
x66
} else {
false
}
val x71 = if (x68) {
true
} else {
val x69 = x35()
x69
}
x71
}
val x73 = x48()
val x76 = if (x73) {
true
} else {
val x74 = x1.cp = x19
false
}
x76
} else {
false
}
val x81 = if (x78) {
true
} else {
val x79 = x1.cp = x18
false
}
val x82 = if (x81) {
true
} else {
true
}
x82
}
def x3(): Boolean = {
val x5 = x1.cp
def x6(): Boolean = {
val x8 = x1.parensIndex(6)
val x9 = x1.parensLength(6)
val x10 = x1.cp
val x11 = x10 - x5
val x12 = x1.setParens(6,x5,x11)
val x84 = x1.cp
val x85 = x1.cp
val x86 = x1.cp
val x87 = x1.cp
val x89 = x87 == x22
val x98 = if (x89) {
false
} else {
val x90 = x1.cp
val x91 = x21.charAt(x90)
val x92 = '?' == x91
val x93 = if (x92) {
true
} else {
x92
}
val x96 = if (x93) {
val x94 = x1.cp += 1
true
} else {
false
}
x96
}
val x150 = if (x98) {
val x99 = x1.cp
def x100(): Boolean = {
val x102 = x1.parensIndex(8)
val x103 = x1.parensLength(8)
val x104 = x1.cp
val x105 = x104 - x99
val x106 = x1.setParens(8,x99,x105)
val x107 = x1.parensIndex(7)
val x108 = x1.parensLength(7)
val x109 = x1.cp
val x110 = x109 - x84
val x111 = x1.setParens(7,x84,x110)
val x112 = x13()
val x115 = if (x112) {
true
} else {
val x113 = x1.setParens(7,x107,x108)
false
}
val x118 = if (x115) {
true
} else {
val x116 = x1.setParens(8,x102,x103)
false
}
x118
}
def x120(): Boolean = {
val x122 = x1.cp
val x123 = x1.cp
val x125 = x123 == x22
val x131 = if (x125) {
false
} else {
val x126 = x1.cp
val x127 = x21.charAt(x126)
val x129 = RhinoMatchUtil.classMatcher(x1,x128,x127)
x129
}
val x134 = if (x131) {
val x132 = x1.cp += 1
true
} else {
false
}
val x140 = if (x134) {
val x135 = x120()
val x138 = if (x135) {
true
} else {
val x136 = x1.cp = x122
false
}
x138
} else {
false
}
val x143 = if (x140) {
true
} else {
val x141 = x100()
x141
}
x143
}
val x145 = x120()
val x148 = if (x145) {
true
} else {
val x146 = x1.cp = x86
false
}
x148
} else {
false
}
val x153 = if (x150) {
true
} else {
val x151 = x1.cp = x85
false
}
val x156 = if (x153) {
true
} else {
val x154 = x13()
x154
}
val x159 = if (x156) {
true
} else {
val x157 = x1.setParens(6,x8,x9)
false
}
x159
}
def x161(): Boolean = {
val x163 = x1.cp
val x164 = x1.cp
val x166 = x164 == x22
val x172 = if (x166) {
false
} else {
val x167 = x1.cp
val x168 = x21.charAt(x167)
val x170 = RhinoMatchUtil.classMatcher(x1,x169,x168)
x170
}
val x175 = if (x172) {
val x173 = x1.cp += 1
true
} else {
false
}
val x181 = if (x175) {
val x176 = x161()
val x179 = if (x176) {
true
} else {
val x177 = x1.cp = x163
false
}
x179
} else {
false
}
val x184 = if (x181) {
true
} else {
val x182 = x6()
x182
}
x184
}
val x186 = x161()
x186
}
def x252(): Boolean = {
val x254 = x1.parensIndex(0)
val x255 = x1.parensLength(0)
val x256 = x1.cp
val x257 = x256 - x188
val x258 = x1.setParens(0,x188,x257)
val x259 = x3()
val x262 = if (x259) {
true
} else {
val x260 = x1.setParens(0,x254,x255)
false
}
x262
}
def x193(): Boolean = {
val x195 = x1.parensIndex(2)
val x196 = x1.parensLength(2)
val x197 = x1.cp
val x198 = x197 - x192
val x199 = x1.setParens(2,x192,x198)
val x200 = x1.cp
val x201 = x1.cp
val x203 = x201 == x22
val x212 = if (x203) {
false
} else {
val x204 = x1.cp
val x205 = x21.charAt(x204)
val x206 = ':' == x205
val x207 = if (x206) {
true
} else {
x206
}
val x210 = if (x207) {
val x208 = x1.cp += 1
true
} else {
false
}
x210
}
val x400 = if (x212) {
val x213 = x1.cp
val x214 = x1.cp
val x216 = x214 == x22
val x225 = if (x216) {
false
} else {
val x217 = x1.cp
val x218 = x21.charAt(x217)
val x219 = '/' == x218
val x220 = if (x219) {
true
} else {
x219
}
val x223 = if (x220) {
val x221 = x1.cp += 1
true
} else {
false
}
x223
}
val x395 = if (x225) {
val x226 = x1.cp
val x227 = x1.cp
val x229 = x227 == x22
val x238 = if (x229) {
false
} else {
val x230 = x1.cp
val x231 = x21.charAt(x230)
val x232 = '/' == x231
val x233 = if (x232) {
true
} else {
x232
}
val x236 = if (x233) {
val x234 = x1.cp += 1
true
} else {
false
}
x236
}
val x390 = if (x238) {
val x239 = x1.parensIndex(1)
val x240 = x1.parensLength(1)
val x241 = x1.cp
val x242 = x241 - x190
val x243 = x1.setParens(1,x190,x242)
val x244 = x1.cp
def x245(): Boolean = {
val x247 = x1.parensIndex(3)
val x248 = x1.parensLength(3)
val x249 = x1.cp
val x250 = x249 - x244
val x251 = x1.setParens(3,x244,x250)
val x264 = x1.cp
val x265 = x1.cp
val x266 = x1.cp
val x267 = x1.cp
val x269 = x267 == x22
val x278 = if (x269) {
false
} else {
val x270 = x1.cp
val x271 = x21.charAt(x270)
val x272 = ':' == x271
val x273 = if (x272) {
true
} else {
x272
}
val x276 = if (x273) {
val x274 = x1.cp += 1
true
} else {
false
}
x276
}
val x346 = if (x278) {
val x279 = x1.cp
def x280(): Boolean = {
val x282 = x1.parensIndex(5)
val x283 = x1.parensLength(5)
val x284 = x1.cp
val x285 = x284 - x279
val x286 = x1.setParens(5,x279,x285)
val x287 = x1.parensIndex(4)
val x288 = x1.parensLength(4)
val x289 = x1.cp
val x290 = x289 - x264
val x291 = x1.setParens(4,x264,x290)
val x292 = x252()
val x295 = if (x292) {
true
} else {
val x293 = x1.setParens(4,x287,x288)
false
}
val x298 = if (x295) {
true
} else {
val x296 = x1.setParens(5,x282,x283)
false
}
x298
}
def x312(): Boolean = {
val x314 = x1.cp
val x315 = x1.cp
val x317 = x315 == x22
val x322 = if (x317) {
false
} else {
val x318 = x1.cp
val x319 = x21.charAt(x318)
val x320 = Rhino.isDigit(x319)
x320
}
val x325 = if (x322) {
val x323 = x1.cp += 1
true
} else {
false
}
val x331 = if (x325) {
val x326 = x312()
val x329 = if (x326) {
true
} else {
val x327 = x1.cp = x314
false
}
x329
} else {
false
}
val x334 = if (x331) {
true
} else {
val x332 = x280()
x332
}
x334
}
val x300 = x1.cp
val x301 = x1.cp
val x303 = x301 == x22
val x308 = if (x303) {
false
} else {
val x304 = x1.cp
val x305 = x21.charAt(x304)
val x306 = Rhino.isDigit(x305)
x306
}
val x311 = if (x308) {
val x309 = x1.cp += 1
true
} else {
false
}
val x341 = if (x311) {
val x336 = x312()
val x339 = if (x336) {
true
} else {
val x337 = x1.cp = x300
false
}
x339
} else {
false
}
val x344 = if (x341) {
true
} else {
val x342 = x1.cp = x266
false
}
x344
} else {
false
}
val x349 = if (x346) {
true
} else {
val x347 = x1.cp = x265
false
}
val x352 = if (x349) {
true
} else {
val x350 = x252()
x350
}
val x355 = if (x352) {
true
} else {
val x353 = x1.setParens(3,x247,x248)
false
}
x355
}
def x357(): Boolean = {
val x359 = x1.cp
val x360 = x1.cp
val x362 = x360 == x22
val x368 = if (x362) {
false
} else {
val x363 = x1.cp
val x364 = x21.charAt(x363)
val x366 = RhinoMatchUtil.classMatcher(x1,x365,x364)
x366
}
val x371 = if (x368) {
val x369 = x1.cp += 1
true
} else {
false
}
val x377 = if (x371) {
val x372 = x357()
val x375 = if (x372) {
true
} else {
val x373 = x1.cp = x359
false
}
x375
} else {
false
}
val x380 = if (x377) {
true
} else {
val x378 = x245()
x378
}
x380
}
val x382 = x357()
val x385 = if (x382) {
true
} else {
val x383 = x1.setParens(1,x239,x240)
false
}
val x388 = if (x385) {
true
} else {
val x386 = x1.cp = x226
false
}
x388
} else {
false
}
val x393 = if (x390) {
true
} else {
val x391 = x1.cp = x213
false
}
x393
} else {
false
}
val x398 = if (x395) {
true
} else {
val x396 = x1.cp = x200
false
}
x398
} else {
false
}
val x403 = if (x400) {
true
} else {
val x401 = x1.setParens(2,x195,x196)
false
}
x403
}
def x417(): Boolean = {
val x419 = x1.cp
val x420 = x1.cp
val x422 = x420 == x22
val x427 = if (x422) {
false
} else {
val x423 = x1.cp
val x424 = x21.charAt(x423)
val x425 = Rhino.isWord(x424)
x425
}
val x430 = if (x427) {
val x428 = x1.cp += 1
true
} else {
false
}
val x436 = if (x430) {
val x431 = x417()
val x434 = if (x431) {
true
} else {
val x432 = x1.cp = x419
false
}
x434
} else {
false
}
val x439 = if (x436) {
true
} else {
val x437 = x193()
x437
}
x439
}
val x405 = x1.cp
val x406 = x1.cp
val x408 = x406 == x22
val x413 = if (x408) {
false
} else {
val x409 = x1.cp
val x410 = x21.charAt(x409)
val x411 = Rhino.isWord(x410)
x411
}
val x416 = if (x413) {
val x414 = x1.cp += 1
true
} else {
false
}
val x446 = if (x416) {
val x441 = x417()
val x444 = if (x441) {
true
} else {
val x442 = x1.cp = x405
false
}
x444
} else {
false
}
val x449 = if (x446) {
true
} else {
val x447 = x1.cp = x191
false
}
val x452 = if (x449) {
true
} else {
val x450 = x1.cp = x189
false
}
val x455 = if (x452) {
true
} else {
val x453 = x3()
x453
}
val x458 = if (x455) {
true
} else {
val x456 = x1.cp = x2
false
}
x458
}
}
/*****************************************
  End of Generated Code                  
*******************************************/

compilation: ok
---- took 809ms
REGlobalData(0,33 / (23,0),(7,0),(4,0),(16,7),(-1,-1),(-1,-1),(10,23),(-1,-1),(-1,-1),(-1,-1),(-1,-1))/uggc://jjj.snprobbx.pbz/ybtva.cuc,uggc://jjj.snprobbx.pbz,uggc://,uggc,jjj.snprobbx.pbz,,,/ybtva.cuc,,,,
done
