(\w{4})b @ aaaaaaabc
REGlobalData(3,8 / (4,3))/aaaab,aaaa
----(\w{4})b
/*****************************************
  Emitting Generated Code                  
*******************************************/
import scala.virtualization.lms.regexp._
import RhinoMatcher.matcher
class staged$2 extends ((Unit)=>(Boolean)) {
def apply(x0:Unit): Boolean = {
val x1 = matcher.gData
val x11 = matcher.input
val x12 = x11.length
val x2 = if (x1.parens == null) null else x1.parens.clone //copy
val x3 = x1.cp
val x4 = x1.cp
def x30(): Boolean = {
val x32 = x1.cp
val x33 = x32 - x4
val x34 = x1.setParens(0,x4,x33)
val x35 = x1.cp
val x37 = x35 == x12
val x46 = if (x37) {
false
} else {
val x38 = x1.cp
val x39 = x11.charAt(x38)
val x40 = 'b' == x39
val x41 = if (x40) {
true
} else {
x40
}
val x44 = if (x41) {
val x42 = x1.cp += 1
true
} else {
false
}
x44
}
val x54 = if (x46) {
true
} else {
val x49 = x1.parens = x2
val x50 = x1.cp = x3
false
}
x54
}
def x58(): Boolean = {
val x60 = x1.parens = x2
val x61 = x1.cp = x3
false
}
def x5(x6: (Int)): Boolean = {
val x7 = x6 < 4
val x75 = if (x7) {
val x8 = if (x1.parens == null) null else x1.parens.clone //copy
val x9 = x1.cp
val x10 = x1.cp
val x14 = x10 == x12
val x19 = if (x14) {
false
} else {
val x15 = x1.cp
val x16 = x11.charAt(x15)
val x17 = Rhino.isWord(x16)
x17
}
val x22 = if (x19) {
val x20 = x1.cp += 1
true
} else {
false
}
val x26 = if (x22) {
val x23 = x6 + 1
val x24 = x5(x23)
x24
} else {
false
}
val x67 = if (x26) {
true
} else {
val x27 = x1.parens = x8
val x28 = x1.cp = x9
val x29 = x6 >= 4
val x65 = if (x29) {
val x56 = x30()
x56
} else {
val x63 = x58()
x63
}
x65
}
x67
} else {
val x29 = x6 >= 4
val x73 = if (x29) {
val x69 = x30()
x69
} else {
val x71 = x58()
x71
}
x73
}
x75
}
val x77 = x5(0)
x77
}
}
/*****************************************
  End of Generated Code                  
*******************************************/

compilation: ok
---- took 332ms
REGlobalData(3,8 / (4,3))/aaaab,aaaa
done
