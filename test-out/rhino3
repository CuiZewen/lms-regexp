(\w{4})b @ aaaaaaabc
REGlobalData(3,8 / (4,3))/aaaab,aaaa
----(\w{4})b
/*****************************************
  Emitting Generated Code                  
*******************************************/
import scala.virtualization.lms.regexp._
import RhinoMatcher.matcher
class staged$2 extends ((Unit)=>(Boolean)) {
def apply(x0:Unit): Boolean = {
val x1 = matcher.gData
val x9 = matcher.input
val x10 = x9.length
val x2 = x1.cp
val x3 = x1.cp
def x29(): Boolean = {
val x31 = x1.parensIndex(0)
val x32 = x1.parensLength(0)
val x33 = x1.cp
val x34 = x33 - x3
val x35 = x1.setParens(0,x3,x34)
val x36 = x1.cp
val x37 = x1.cp
val x39 = x37 == x10
val x48 = if (x39) {
false
} else {
val x40 = x1.cp
val x41 = x9.charAt(x40)
val x42 = 'b' == x41
val x43 = if (x42) {
true
} else {
x42
}
val x46 = if (x43) {
val x44 = x1.cp += 1
true
} else {
false
}
x46
}
val x51 = if (x48) {
true
} else {
val x49 = x1.setParens(0,x31,x32)
false
}
x51
}
def x4(x5: (Int)): Boolean = {
val x6 = x5 < 4
val x63 = if (x6) {
val x7 = x1.cp
val x8 = x1.cp
val x12 = x8 == x10
val x17 = if (x12) {
false
} else {
val x13 = x1.cp
val x14 = x9.charAt(x13)
val x15 = Rhino.isWord(x14)
x15
}
val x20 = if (x17) {
val x18 = x1.cp += 1
true
} else {
false
}
val x27 = if (x20) {
val x21 = x5 + 1
val x22 = x4(x21)
val x25 = if (x22) {
true
} else {
val x23 = x1.cp = x7
false
}
x25
} else {
false
}
val x57 = if (x27) {
true
} else {
val x28 = x5 >= 4
val x55 = if (x28) {
val x53 = x29()
x53
} else {
false
}
x55
}
x57
} else {
val x28 = x5 >= 4
val x61 = if (x28) {
val x59 = x29()
x59
} else {
false
}
x61
}
x63
}
val x65 = x4(0)
val x68 = if (x65) {
true
} else {
val x66 = x1.cp = x2
false
}
x68
}
}
/*****************************************
  End of Generated Code                  
*******************************************/

compilation: ok
---- took 278ms
REGlobalData(3,8 / (4,3))/aaaab,aaaa
done
