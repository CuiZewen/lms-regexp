(\w{4})b @ aaaaaaabc
REGlobalData(3,8 / (4,3))/aaaab,aaaa
----(\w{4})b
/*****************************************
  Emitting Generated Code                  
*******************************************/
import scala.virtualization.lms.regexp.backtrack._
import RhinoMatcher.matcher
class staged$2 extends ((Unit)=>(Boolean)) {
def apply(x0:Unit): Boolean = {
val x1 = matcher.gData
val x13 = matcher.input
val x14 = x13.length
val x2 = x1.cp
val x3 = x1.cp
def x4(): Boolean = {
val x6 = x1.parensIndex(0)
val x7 = x1.parensLength(0)
val x8 = x1.cp
val x9 = x8 - x3
val x10 = x1.setParens(0,x3,x9)
val x11 = x1.cp
val x12 = x1.cp
val x16 = x12 == x14
val x25 = if (x16) {
false
} else {
val x17 = x1.cp
val x18 = x13.charAt(x17)
val x19 = 'b' == x18
val x20 = if (x19) {
true
} else {
x19
}
val x23 = if (x20) {
val x21 = x1.cp += 1
true
} else {
false
}
x23
}
val x28 = if (x25) {
true
} else {
val x26 = x1.setParens(0,x6,x7)
false
}
x28
}
def x30(x31: (Int)): Boolean = {
val x32 = x31 < 4
val x63 = if (x32) {
val x33 = x1.cp
val x34 = x1.cp
val x36 = x34 == x14
val x41 = if (x36) {
false
} else {
val x37 = x1.cp
val x38 = x13.charAt(x37)
val x39 = Rhino.isWord(x38)
x39
}
val x44 = if (x41) {
val x42 = x1.cp += 1
true
} else {
false
}
val x51 = if (x44) {
val x45 = x31 + 1
val x46 = x30(x45)
val x49 = if (x46) {
true
} else {
val x47 = x1.cp = x33
false
}
x49
} else {
false
}
val x57 = if (x51) {
true
} else {
val x52 = x31 >= 4
val x55 = if (x52) {
val x53 = x4()
x53
} else {
false
}
x55
}
x57
} else {
val x52 = x31 >= 4
val x61 = if (x52) {
val x59 = x4()
x59
} else {
false
}
x61
}
x63
}
val x65 = x30(0)
val x68 = if (x65) {
true
} else {
val x66 = x1.cp = x2
false
}
x68
}
}
/*****************************************
  End of Generated Code                  
*******************************************/

compilation: ok
---- took 210ms
REGlobalData(3,8 / (4,3))/aaaab,aaaa
done
