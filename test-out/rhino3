(\w{4})b @ aaaaaaabc
REGlobalData(3,8 / (4,3))/aaaab,aaaa
----(\w{4})b
/*****************************************
  Emitting Generated Code                  
*******************************************/
import scala.virtualization.lms.regexp._
import RhinoMatcher.matcher
class staged$2 extends ((Unit)=>(Boolean)) {
def apply(x0:Unit): Boolean = {
val x1 = matcher.gData
val x12 = matcher.input
val x13 = x12.length
val x2 = if (x1.parens == null) null else x1.parens.clone //copy
val x3 = x1.cp
def x31(): Boolean = {
val x33 = x1.parensIndex(0)
val x34 = x1.cp
val x35 = x34 - x33
val x36 = x1.setParens(0,x33,x35)
val x37 = x1.cp
val x39 = x37 == x13
val x48 = if (x39) {
false
} else {
val x40 = x1.cp
val x41 = x12.charAt(x40)
val x42 = 'b' == x41
val x43 = if (x42) {
true
} else {
x42
}
val x46 = if (x43) {
val x44 = x1.cp += 1
true
} else {
false
}
x46
}
val x56 = if (x48) {
true
} else {
val x51 = x1.parens = x2
val x52 = x1.cp = x3
false
}
x56
}
def x60(): Boolean = {
val x62 = x1.parens = x2
val x63 = x1.cp = x3
false
}
def x6(x7: (Int)): Boolean = {
val x8 = x7 < 4
val x77 = if (x8) {
val x9 = if (x1.parens == null) null else x1.parens.clone //copy
val x10 = x1.cp
val x11 = x1.cp
val x15 = x11 == x13
val x20 = if (x15) {
false
} else {
val x16 = x1.cp
val x17 = x12.charAt(x16)
val x18 = Rhino.isWord(x17)
x18
}
val x23 = if (x20) {
val x21 = x1.cp += 1
true
} else {
false
}
val x27 = if (x23) {
val x24 = x7 + 1
val x25 = x6(x24)
x25
} else {
false
}
val x69 = if (x27) {
true
} else {
val x28 = x1.parens = x9
val x29 = x1.cp = x10
val x30 = x7 >= 4
val x67 = if (x30) {
val x58 = x31()
x58
} else {
val x65 = x60()
x65
}
x67
}
x69
} else {
val x30 = x7 >= 4
val x75 = if (x30) {
val x71 = x31()
x71
} else {
val x73 = x60()
x73
}
x75
}
x77
}
val x4 = x1.cp
val x5 = x1.setParens(0,x4,0)
val x79 = x6(0)
x79
}
}
/*****************************************
  End of Generated Code                  
*******************************************/

compilation: ok
---- took 432ms
REGlobalData(3,8 / (4,3))/aaaab,aaaa
done
