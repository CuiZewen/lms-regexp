(?:ZFVR.(\d+\.\d+))|(?:(?:Sversbk|TenaCnenqvfb|Vprjrnfry).(\d+\.\d+))|(?:Bcren.(\d+\.\d+))|(?:NccyrJroXvg.(\d+(?:\.\d+)?)) @ Zbmvyyn/5.0 (Jvaqbjf; H; Jvaqbjf AG 5.1; ra-HF) NccyrJroXvg/528.9 (XUGZY, yvxr Trpxb) Puebzr/2.0.157.0 Fnsnev/528.9
REGlobalData(48,65 / (-1,-1),(-1,-1),(-1,-1),(5,60))/NccyrJroXvg/528.9,,,,528.9
----(?:ZFVR.(\d+\.\d+))|(?:(?:Sversbk|TenaCnenqvfb|Vprjrnfry).(\d+\.\d+))|(?:Bcren.(\d+\.\d+))|(?:NccyrJroXvg.(\d+(?:\.\d+)?))
/*****************************************
  Emitting Generated Code                  
*******************************************/
import scala.virtualization.lms.regexp._
import RhinoMatcher.matcher
class staged$4 extends ((Unit)=>(Boolean)) {
def apply(x1005:Unit): Boolean = {
var x1122 = null.asInstanceOf[scala.Function1[Int, Boolean]]
var x1090 = null.asInstanceOf[scala.Function1[Int, Boolean]]
var x1715 = null.asInstanceOf[scala.Function1[Int, Boolean]]
val x5 = {x6: (Boolean) => 
x6
}
val x1021 = {x1022: (Boolean) => 
val x1023 = x5(x1022)
x1023
}
val x1036 = {x1037: (Boolean) => 
val x1038 = x1021(x1037)
x1038
}
val x1047 = {x1048: (Boolean) => 
val x1049 = x1036(x1048)
x1049
}
val x1077 = {x1078: (Boolean) => 
val x1087 = if (x1078) {
val x1079 = matcher.gData
val x1080 = x1079.parensIndex(3)
val x1081 = matcher.gData
val x1082 = matcher.gData
val x1083 = x1082.cp
val x1084 = x1083 - x1080
val x1085 = x1081.setParens(3,x1080,x1084)
true
} else {
false
}
val x1088 = x1047(x1087)
x1088
}
val x1139 = {x1140: (Boolean) => 
val x1141 = x1077(x1140)
x1141
}
x1122 = {x1123: (Int) => 
val x1124 = x1123 < 1
val x1131 = x1123 + 1
val x1216 = if (x1124) {
val x1125 = matcher.gData
val x1126 = if (x1125.parens == null) null else x1125.parens.toList.toArray //copy
val x1127 = matcher.gData
val x1128 = x1127.cp
val x1148 = matcher.gData
val x1149 = x1148.cp
val x1150 = matcher.input
val x1151 = x1150.length
val x1152 = x1149 != x1151
val x1164 = if (x1152) {
val x1153 = matcher.input
val x1154 = matcher.gData
val x1155 = x1154.cp
val x1156 = x1153.charAt(x1155)
val x1157 = '.' == x1156
val x1158 = if (x1157) {
true
} else {
x1157
}
val x1162 = if (x1158) {
val x1159 = matcher.gData
val x1160 = x1159.cp += 1
true
} else {
false
}
x1162
} else {
false
}
val x1143 = x1123 >= 0
val x1129 = {x1130: (Boolean) => 
val x1134 = if (x1130) {
val x1132 = x1122(x1131)
x1132
} else {
false
}
val x1146 = if (x1134) {
true
} else {
val x1135 = matcher.gData
val x1136 = x1135.parens = x1126
val x1137 = matcher.gData
val x1138 = x1137.cp = x1128
val x1144 = x1139(x1143)
x1144
}
x1146
}
val x1195 = {x1196: (Boolean) => 
val x1197 = x1129(x1196)
x1197
}
val x1212 = if (x1164) {
var x1165 = null.asInstanceOf[scala.Function1[Int, Boolean]]
x1165 = {x1166: (Int) => 
val x1206 = if (true) {
val x1167 = matcher.gData
val x1168 = if (x1167.parens == null) null else x1167.parens.toList.toArray //copy
val x1169 = matcher.gData
val x1170 = x1169.cp
val x1171 = matcher.gData
val x1172 = x1171.cp
val x1173 = matcher.input
val x1174 = x1173.length
val x1175 = x1172 != x1174
val x1182 = if (x1175) {
val x1176 = matcher.input
val x1177 = matcher.gData
val x1178 = x1177.cp
val x1179 = x1176.charAt(x1178)
val x1180 = Rhino.isDigit(x1179)
x1180
} else {
false
}
val x1186 = if (x1182) {
val x1183 = matcher.gData
val x1184 = x1183.cp += 1
true
} else {
false
}
val x1190 = if (x1186) {
val x1187 = x1166 + 1
val x1188 = x1165(x1187)
x1188
} else {
false
}
val x1202 = if (x1190) {
true
} else {
val x1191 = matcher.gData
val x1192 = x1191.parens = x1168
val x1193 = matcher.gData
val x1194 = x1193.cp = x1170
val x1199 = x1166 >= 1
val x1200 = x1195(x1199)
x1200
}
x1202
} else {
val x1199 = x1166 >= 1
val x1204 = x1195(x1199)
x1204
}
x1206
}
val x1208 = x1165(0)
x1208
} else {
val x1210 = x1129(false)
x1210
}
x1212
} else {
val x1143 = x1123 >= 0
val x1214 = x1139(x1143)
x1214
}
x1216
}
val x1120 = {x1121: (Boolean) => 
val x1222 = if (x1121) {
val x1218 = x1122(0)
x1218
} else {
val x1220 = x1077(false)
x1220
}
x1222
}
x1090 = {x1091: (Int) => 
val x1231 = if (true) {
val x1092 = matcher.gData
val x1093 = if (x1092.parens == null) null else x1092.parens.toList.toArray //copy
val x1094 = matcher.gData
val x1095 = x1094.cp
val x1096 = matcher.gData
val x1097 = x1096.cp
val x1098 = matcher.input
val x1099 = x1098.length
val x1100 = x1097 != x1099
val x1107 = if (x1100) {
val x1101 = matcher.input
val x1102 = matcher.gData
val x1103 = x1102.cp
val x1104 = x1101.charAt(x1103)
val x1105 = Rhino.isDigit(x1104)
x1105
} else {
false
}
val x1111 = if (x1107) {
val x1108 = matcher.gData
val x1109 = x1108.cp += 1
true
} else {
false
}
val x1115 = if (x1111) {
val x1112 = x1091 + 1
val x1113 = x1090(x1112)
x1113
} else {
false
}
val x1227 = if (x1115) {
true
} else {
val x1116 = matcher.gData
val x1117 = x1116.parens = x1093
val x1118 = matcher.gData
val x1119 = x1118.cp = x1095
val x1224 = x1091 >= 1
val x1225 = x1120(x1224)
x1225
}
x1227
} else {
val x1224 = x1091 >= 1
val x1229 = x1120(x1224)
x1229
}
x1231
}
val x1006 = matcher.gData
val x1007 = x1006.cp
val x1008 = matcher.gData
val x1009 = if (x1008.parens == null) null else x1008.parens.toList.toArray //copy
val x1010 = {x1011: (Boolean) => 
val x1012 = x5(x1011)
val x1619 = if (x1012) {
true
} else {
var x1504 = null.asInstanceOf[scala.Function1[Int, Boolean]]
var x1451 = null.asInstanceOf[scala.Function1[Int, Boolean]]
val x1013 = matcher.gData
val x1014 = x1013.cp = x1007
val x1015 = matcher.gData
val x1016 = x1015.parens = x1009
val x1017 = matcher.gData
val x1018 = x1017.cp
val x1019 = matcher.gData
val x1020 = if (x1019.parens == null) null else x1019.parens.toList.toArray //copy
val x1025 = {x1026: (Boolean) => 
val x1027 = x1021(x1026)
val x1409 = if (x1027) {
true
} else {
var x1335 = null.asInstanceOf[scala.Function1[Int, Boolean]]
val x1028 = matcher.gData
val x1029 = x1028.cp = x1018
val x1030 = matcher.gData
val x1031 = x1030.parens = x1020
val x1032 = matcher.gData
val x1033 = x1032.cp
val x1034 = matcher.gData
val x1035 = if (x1034.parens == null) null else x1034.parens.toList.toArray //copy
val x1040 = {x1041: (Boolean) => 
val x1042 = x1036(x1041)
val x1243 = if (x1042) {
true
} else {
val x1043 = matcher.gData
val x1044 = x1043.cp = x1033
val x1045 = matcher.gData
val x1046 = x1045.parens = x1035
val x1051 = matcher.gData
val x1052 = matcher.input
val x1053 = matcher.input
val x1054 = x1053.length
val x1055 = RhinoMatchUtil.flatNMatcher(x1051,94,11,x1052,x1054) // NccyrJroXvg
val x1241 = if (x1055) {
val x1056 = matcher.gData
val x1057 = x1056.cp
val x1058 = matcher.input
val x1059 = x1058.length
val x1060 = x1057 != x1059
val x1068 = if (x1060) {
val x1061 = matcher.input
val x1062 = matcher.gData
val x1063 = x1062.cp
val x1064 = x1061.charAt(x1063)
val x1065 = Rhino.isLineTerm(x1064)
val x1066 = !x1065
x1066
} else {
false
}
val x1072 = if (x1068) {
val x1069 = matcher.gData
val x1070 = x1069.cp += 1
true
} else {
false
}
val x1237 = if (x1072) {
val x1073 = matcher.gData
val x1074 = matcher.gData
val x1075 = x1074.cp
val x1076 = x1073.setParens(3,x1075,0)
val x1233 = x1090(0)
x1233
} else {
val x1235 = x1047(false)
x1235
}
x1237
} else {
val x1239 = x1047(false)
x1239
}
x1241
}
x1243
}
val x1271 = {x1272: (Boolean) => 
val x1281 = if (x1272) {
val x1273 = matcher.gData
val x1274 = x1273.parensIndex(2)
val x1275 = matcher.gData
val x1276 = matcher.gData
val x1277 = x1276.cp
val x1278 = x1277 - x1274
val x1279 = x1275.setParens(2,x1274,x1278)
true
} else {
false
}
val x1282 = x1040(x1281)
x1282
}
val x1367 = {x1368: (Boolean) => 
val x1369 = x1271(x1368)
x1369
}
x1335 = {x1336: (Int) => 
val x1378 = if (true) {
val x1337 = matcher.gData
val x1338 = if (x1337.parens == null) null else x1337.parens.toList.toArray //copy
val x1339 = matcher.gData
val x1340 = x1339.cp
val x1341 = matcher.gData
val x1342 = x1341.setParens(3,-1,0)
val x1343 = matcher.gData
val x1344 = x1343.cp
val x1345 = matcher.input
val x1346 = x1345.length
val x1347 = x1344 != x1346
val x1354 = if (x1347) {
val x1348 = matcher.input
val x1349 = matcher.gData
val x1350 = x1349.cp
val x1351 = x1348.charAt(x1350)
val x1352 = Rhino.isDigit(x1351)
x1352
} else {
false
}
val x1358 = if (x1354) {
val x1355 = matcher.gData
val x1356 = x1355.cp += 1
true
} else {
false
}
val x1362 = if (x1358) {
val x1359 = x1336 + 1
val x1360 = x1335(x1359)
x1360
} else {
false
}
val x1374 = if (x1362) {
true
} else {
val x1363 = matcher.gData
val x1364 = x1363.parens = x1338
val x1365 = matcher.gData
val x1366 = x1365.cp = x1340
val x1371 = x1336 >= 1
val x1372 = x1367(x1371)
x1372
}
x1374
} else {
val x1371 = x1336 >= 1
val x1376 = x1367(x1371)
x1376
}
x1378
}
val x1245 = matcher.gData
val x1246 = matcher.input
val x1247 = matcher.input
val x1248 = x1247.length
val x1249 = RhinoMatchUtil.flatNMatcher(x1245,73,5,x1246,x1248) // Bcren
val x1316 = {x1317: (Boolean) => 
val x1388 = if (x1317) {
val x1318 = matcher.gData
val x1319 = x1318.cp
val x1320 = matcher.input
val x1321 = x1320.length
val x1322 = x1319 != x1321
val x1334 = if (x1322) {
val x1323 = matcher.input
val x1324 = matcher.gData
val x1325 = x1324.cp
val x1326 = x1323.charAt(x1325)
val x1327 = '.' == x1326
val x1328 = if (x1327) {
true
} else {
x1327
}
val x1332 = if (x1328) {
val x1329 = matcher.gData
val x1330 = x1329.cp += 1
true
} else {
false
}
x1332
} else {
false
}
val x1384 = if (x1334) {
val x1380 = x1335(0)
x1380
} else {
val x1382 = x1271(false)
x1382
}
x1384
} else {
val x1386 = x1271(false)
x1386
}
x1388
}
val x1407 = if (x1249) {
val x1250 = matcher.gData
val x1251 = x1250.cp
val x1252 = matcher.input
val x1253 = x1252.length
val x1254 = x1251 != x1253
val x1262 = if (x1254) {
val x1255 = matcher.input
val x1256 = matcher.gData
val x1257 = x1256.cp
val x1258 = x1255.charAt(x1257)
val x1259 = Rhino.isLineTerm(x1258)
val x1260 = !x1259
x1260
} else {
false
}
val x1266 = if (x1262) {
val x1263 = matcher.gData
val x1264 = x1263.cp += 1
true
} else {
false
}
val x1403 = if (x1266) {
var x1284 = null.asInstanceOf[scala.Function1[Int, Boolean]]
x1284 = {x1285: (Int) => 
val x1397 = if (true) {
val x1286 = matcher.gData
val x1287 = if (x1286.parens == null) null else x1286.parens.toList.toArray //copy
val x1288 = matcher.gData
val x1289 = x1288.cp
val x1290 = matcher.gData
val x1291 = x1290.setParens(3,-1,0)
val x1292 = matcher.gData
val x1293 = x1292.cp
val x1294 = matcher.input
val x1295 = x1294.length
val x1296 = x1293 != x1295
val x1303 = if (x1296) {
val x1297 = matcher.input
val x1298 = matcher.gData
val x1299 = x1298.cp
val x1300 = x1297.charAt(x1299)
val x1301 = Rhino.isDigit(x1300)
x1301
} else {
false
}
val x1307 = if (x1303) {
val x1304 = matcher.gData
val x1305 = x1304.cp += 1
true
} else {
false
}
val x1311 = if (x1307) {
val x1308 = x1285 + 1
val x1309 = x1284(x1308)
x1309
} else {
false
}
val x1393 = if (x1311) {
true
} else {
val x1312 = matcher.gData
val x1313 = x1312.parens = x1287
val x1314 = matcher.gData
val x1315 = x1314.cp = x1289
val x1390 = x1285 >= 1
val x1391 = x1316(x1390)
x1391
}
x1393
} else {
val x1390 = x1285 >= 1
val x1395 = x1316(x1390)
x1395
}
x1397
}
val x1267 = matcher.gData
val x1268 = matcher.gData
val x1269 = x1268.cp
val x1270 = x1267.setParens(2,x1269,0)
val x1399 = x1284(0)
x1399
} else {
val x1401 = x1040(false)
x1401
}
x1403
} else {
val x1405 = x1040(false)
x1405
}
x1407
}
x1409
}
val x1438 = {x1439: (Boolean) => 
val x1448 = if (x1439) {
val x1440 = matcher.gData
val x1441 = x1440.parensIndex(1)
val x1442 = matcher.gData
val x1443 = matcher.gData
val x1444 = x1443.cp
val x1445 = x1444 - x1441
val x1446 = x1442.setParens(1,x1441,x1445)
true
} else {
false
}
val x1449 = x1025(x1448)
x1449
}
val x1538 = {x1539: (Boolean) => 
val x1540 = x1438(x1539)
x1540
}
x1504 = {x1505: (Int) => 
val x1549 = if (true) {
val x1506 = matcher.gData
val x1507 = if (x1506.parens == null) null else x1506.parens.toList.toArray //copy
val x1508 = matcher.gData
val x1509 = x1508.cp
val x1510 = matcher.gData
val x1511 = x1510.setParens(2,-1,0)
val x1512 = matcher.gData
val x1513 = x1512.setParens(3,-1,0)
val x1514 = matcher.gData
val x1515 = x1514.cp
val x1516 = matcher.input
val x1517 = x1516.length
val x1518 = x1515 != x1517
val x1525 = if (x1518) {
val x1519 = matcher.input
val x1520 = matcher.gData
val x1521 = x1520.cp
val x1522 = x1519.charAt(x1521)
val x1523 = Rhino.isDigit(x1522)
x1523
} else {
false
}
val x1529 = if (x1525) {
val x1526 = matcher.gData
val x1527 = x1526.cp += 1
true
} else {
false
}
val x1533 = if (x1529) {
val x1530 = x1505 + 1
val x1531 = x1504(x1530)
x1531
} else {
false
}
val x1545 = if (x1533) {
true
} else {
val x1534 = matcher.gData
val x1535 = x1534.parens = x1507
val x1536 = matcher.gData
val x1537 = x1536.cp = x1509
val x1542 = x1505 >= 1
val x1543 = x1538(x1542)
x1543
}
x1545
} else {
val x1542 = x1505 >= 1
val x1547 = x1538(x1542)
x1547
}
x1549
}
val x1485 = {x1486: (Boolean) => 
val x1559 = if (x1486) {
val x1487 = matcher.gData
val x1488 = x1487.cp
val x1489 = matcher.input
val x1490 = x1489.length
val x1491 = x1488 != x1490
val x1503 = if (x1491) {
val x1492 = matcher.input
val x1493 = matcher.gData
val x1494 = x1493.cp
val x1495 = x1492.charAt(x1494)
val x1496 = '.' == x1495
val x1497 = if (x1496) {
true
} else {
x1496
}
val x1501 = if (x1497) {
val x1498 = matcher.gData
val x1499 = x1498.cp += 1
true
} else {
false
}
x1501
} else {
false
}
val x1555 = if (x1503) {
val x1551 = x1504(0)
x1551
} else {
val x1553 = x1438(false)
x1553
}
x1555
} else {
val x1557 = x1438(false)
x1557
}
x1559
}
x1451 = {x1452: (Int) => 
val x1568 = if (true) {
val x1453 = matcher.gData
val x1454 = if (x1453.parens == null) null else x1453.parens.toList.toArray //copy
val x1455 = matcher.gData
val x1456 = x1455.cp
val x1457 = matcher.gData
val x1458 = x1457.setParens(2,-1,0)
val x1459 = matcher.gData
val x1460 = x1459.setParens(3,-1,0)
val x1461 = matcher.gData
val x1462 = x1461.cp
val x1463 = matcher.input
val x1464 = x1463.length
val x1465 = x1462 != x1464
val x1472 = if (x1465) {
val x1466 = matcher.input
val x1467 = matcher.gData
val x1468 = x1467.cp
val x1469 = x1466.charAt(x1468)
val x1470 = Rhino.isDigit(x1469)
x1470
} else {
false
}
val x1476 = if (x1472) {
val x1473 = matcher.gData
val x1474 = x1473.cp += 1
true
} else {
false
}
val x1480 = if (x1476) {
val x1477 = x1452 + 1
val x1478 = x1451(x1477)
x1478
} else {
false
}
val x1564 = if (x1480) {
true
} else {
val x1481 = matcher.gData
val x1482 = x1481.parens = x1454
val x1483 = matcher.gData
val x1484 = x1483.cp = x1456
val x1561 = x1452 >= 1
val x1562 = x1485(x1561)
x1562
}
x1564
} else {
val x1561 = x1452 >= 1
val x1566 = x1485(x1561)
x1566
}
x1568
}
val x1411 = matcher.gData
val x1412 = x1411.cp
val x1413 = matcher.gData
val x1414 = if (x1413.parens == null) null else x1413.parens.toList.toArray //copy
val x1580 = matcher.gData
val x1581 = matcher.input
val x1582 = matcher.input
val x1583 = x1582.length
val x1584 = RhinoMatchUtil.flatNMatcher(x1580,26,7,x1581,x1583) // Sversbk
val x1415 = {x1416: (Boolean) => 
val x1578 = if (x1416) {
val x1417 = matcher.gData
val x1418 = x1417.cp
val x1419 = matcher.input
val x1420 = x1419.length
val x1421 = x1418 != x1420
val x1429 = if (x1421) {
val x1422 = matcher.input
val x1423 = matcher.gData
val x1424 = x1423.cp
val x1425 = x1422.charAt(x1424)
val x1426 = Rhino.isLineTerm(x1425)
val x1427 = !x1426
x1427
} else {
false
}
val x1433 = if (x1429) {
val x1430 = matcher.gData
val x1431 = x1430.cp += 1
true
} else {
false
}
val x1574 = if (x1433) {
val x1434 = matcher.gData
val x1435 = matcher.gData
val x1436 = x1435.cp
val x1437 = x1434.setParens(1,x1436,0)
val x1570 = x1451(0)
x1570
} else {
val x1572 = x1025(false)
x1572
}
x1574
} else {
val x1576 = x1025(false)
x1576
}
x1578
}
val x1585 = x1415(x1584)
val x1617 = if (x1585) {
true
} else {
val x1586 = matcher.gData
val x1587 = x1586.cp = x1412
val x1588 = matcher.gData
val x1589 = x1588.parens = x1414
val x1590 = matcher.gData
val x1591 = x1590.cp
val x1592 = matcher.gData
val x1593 = if (x1592.parens == null) null else x1592.parens.toList.toArray //copy
val x1598 = matcher.gData
val x1599 = matcher.input
val x1600 = matcher.input
val x1601 = x1600.length
val x1602 = RhinoMatchUtil.flatNMatcher(x1598,34,12,x1599,x1601) // TenaCnenqvfb
val x1594 = {x1595: (Boolean) => 
val x1596 = x1415(x1595)
x1596
}
val x1603 = x1594(x1602)
val x1615 = if (x1603) {
true
} else {
val x1604 = matcher.gData
val x1605 = x1604.cp = x1591
val x1606 = matcher.gData
val x1607 = x1606.parens = x1593
val x1608 = matcher.gData
val x1609 = matcher.input
val x1610 = matcher.input
val x1611 = x1610.length
val x1612 = RhinoMatchUtil.flatNMatcher(x1608,47,9,x1609,x1611) // Vprjrnfry
val x1613 = x1594(x1612)
x1613
}
x1615
}
x1617
}
x1619
}
val x1647 = {x1648: (Boolean) => 
val x1657 = if (x1648) {
val x1649 = matcher.gData
val x1650 = x1649.parensIndex(0)
val x1651 = matcher.gData
val x1652 = matcher.gData
val x1653 = x1652.cp
val x1654 = x1653 - x1650
val x1655 = x1651.setParens(0,x1650,x1654)
true
} else {
false
}
val x1658 = x1010(x1657)
x1658
}
val x1751 = {x1752: (Boolean) => 
val x1753 = x1647(x1752)
x1753
}
x1715 = {x1716: (Int) => 
val x1762 = if (true) {
val x1717 = matcher.gData
val x1718 = if (x1717.parens == null) null else x1717.parens.toList.toArray //copy
val x1719 = matcher.gData
val x1720 = x1719.cp
val x1721 = matcher.gData
val x1722 = x1721.setParens(1,-1,0)
val x1723 = matcher.gData
val x1724 = x1723.setParens(2,-1,0)
val x1725 = matcher.gData
val x1726 = x1725.setParens(3,-1,0)
val x1727 = matcher.gData
val x1728 = x1727.cp
val x1729 = matcher.input
val x1730 = x1729.length
val x1731 = x1728 != x1730
val x1738 = if (x1731) {
val x1732 = matcher.input
val x1733 = matcher.gData
val x1734 = x1733.cp
val x1735 = x1732.charAt(x1734)
val x1736 = Rhino.isDigit(x1735)
x1736
} else {
false
}
val x1742 = if (x1738) {
val x1739 = matcher.gData
val x1740 = x1739.cp += 1
true
} else {
false
}
val x1746 = if (x1742) {
val x1743 = x1716 + 1
val x1744 = x1715(x1743)
x1744
} else {
false
}
val x1758 = if (x1746) {
true
} else {
val x1747 = matcher.gData
val x1748 = x1747.parens = x1718
val x1749 = matcher.gData
val x1750 = x1749.cp = x1720
val x1755 = x1716 >= 1
val x1756 = x1751(x1755)
x1756
}
x1758
} else {
val x1755 = x1716 >= 1
val x1760 = x1751(x1755)
x1760
}
x1762
}
val x1621 = matcher.gData
val x1622 = matcher.input
val x1623 = matcher.input
val x1624 = x1623.length
val x1625 = RhinoMatchUtil.flatNMatcher(x1621,3,4,x1622,x1624) // ZFVR
val x1696 = {x1697: (Boolean) => 
val x1772 = if (x1697) {
val x1698 = matcher.gData
val x1699 = x1698.cp
val x1700 = matcher.input
val x1701 = x1700.length
val x1702 = x1699 != x1701
val x1714 = if (x1702) {
val x1703 = matcher.input
val x1704 = matcher.gData
val x1705 = x1704.cp
val x1706 = x1703.charAt(x1705)
val x1707 = '.' == x1706
val x1708 = if (x1707) {
true
} else {
x1707
}
val x1712 = if (x1708) {
val x1709 = matcher.gData
val x1710 = x1709.cp += 1
true
} else {
false
}
x1712
} else {
false
}
val x1768 = if (x1714) {
val x1764 = x1715(0)
x1764
} else {
val x1766 = x1647(false)
x1766
}
x1768
} else {
val x1770 = x1647(false)
x1770
}
x1772
}
val x1791 = if (x1625) {
val x1626 = matcher.gData
val x1627 = x1626.cp
val x1628 = matcher.input
val x1629 = x1628.length
val x1630 = x1627 != x1629
val x1638 = if (x1630) {
val x1631 = matcher.input
val x1632 = matcher.gData
val x1633 = x1632.cp
val x1634 = x1631.charAt(x1633)
val x1635 = Rhino.isLineTerm(x1634)
val x1636 = !x1635
x1636
} else {
false
}
val x1642 = if (x1638) {
val x1639 = matcher.gData
val x1640 = x1639.cp += 1
true
} else {
false
}
val x1787 = if (x1642) {
var x1660 = null.asInstanceOf[scala.Function1[Int, Boolean]]
x1660 = {x1661: (Int) => 
val x1781 = if (true) {
val x1662 = matcher.gData
val x1663 = if (x1662.parens == null) null else x1662.parens.toList.toArray //copy
val x1664 = matcher.gData
val x1665 = x1664.cp
val x1666 = matcher.gData
val x1667 = x1666.setParens(1,-1,0)
val x1668 = matcher.gData
val x1669 = x1668.setParens(2,-1,0)
val x1670 = matcher.gData
val x1671 = x1670.setParens(3,-1,0)
val x1672 = matcher.gData
val x1673 = x1672.cp
val x1674 = matcher.input
val x1675 = x1674.length
val x1676 = x1673 != x1675
val x1683 = if (x1676) {
val x1677 = matcher.input
val x1678 = matcher.gData
val x1679 = x1678.cp
val x1680 = x1677.charAt(x1679)
val x1681 = Rhino.isDigit(x1680)
x1681
} else {
false
}
val x1687 = if (x1683) {
val x1684 = matcher.gData
val x1685 = x1684.cp += 1
true
} else {
false
}
val x1691 = if (x1687) {
val x1688 = x1661 + 1
val x1689 = x1660(x1688)
x1689
} else {
false
}
val x1777 = if (x1691) {
true
} else {
val x1692 = matcher.gData
val x1693 = x1692.parens = x1663
val x1694 = matcher.gData
val x1695 = x1694.cp = x1665
val x1774 = x1661 >= 1
val x1775 = x1696(x1774)
x1775
}
x1777
} else {
val x1774 = x1661 >= 1
val x1779 = x1696(x1774)
x1779
}
x1781
}
val x1643 = matcher.gData
val x1644 = matcher.gData
val x1645 = x1644.cp
val x1646 = x1643.setParens(0,x1645,0)
val x1783 = x1660(0)
x1783
} else {
val x1785 = x1010(false)
x1785
}
x1787
} else {
val x1789 = x1010(false)
x1789
}
x1791
}
}
/*****************************************
  End of Generated Code                  
*******************************************/

compilation: ok
---- took 12652ms
REGlobalData(48,65 / (-1,-1),(-1,-1),(-1,-1),(5,60))/NccyrJroXvg/528.9,,,,528.9
done
