(\\\"|\x00-|\x1f|\x7f-|\x9f|?|?-|?|?|?|?|?-|?|?-|?|?-|?|?|?-|?) @ GnoThvq
null
----(\\\"|\x00-|\x1f|\x7f-|\x9f|?|?-|?|?|?|?|?-|?|?-|?|?-|?|?|?-|?)
/*****************************************
  Emitting Generated Code                  
*******************************************/
import scala.virtualization.lms.regexp._
import RhinoMatcher.matcher
class staged$6 extends ((Unit)=>(Boolean)) {
def apply(x0:Unit): Boolean = {
val x1 = matcher.gData
val x2 = x1.cp
val x11 = x1.cp
val x12 = x1.cp
val x13 = x1.cp
val x14 = matcher.input
val x15 = x14.length
val x17 = x13 == x15
val x26 = if (x17) {
false
} else {
val x18 = x1.cp
val x19 = x14.charAt(x18)
val x20 = '\\' == x19
val x21 = if (x20) {
true
} else {
x20
}
val x24 = if (x21) {
val x22 = x1.cp += 1
true
} else {
false
}
x24
}
def x3(): Boolean = {
val x5 = x1.parensIndex(0)
val x6 = x1.parensLength(0)
val x7 = x1.cp
val x8 = x7 - x2
val x9 = x1.setParens(0,x2,x8)
true
}
val x50 = if (x26) {
val x27 = x1.cp
val x28 = x1.cp
val x30 = x28 == x15
val x39 = if (x30) {
false
} else {
val x31 = x1.cp
val x32 = x14.charAt(x31)
val x33 = '"' == x32
val x34 = if (x33) {
true
} else {
x33
}
val x37 = if (x34) {
val x35 = x1.cp += 1
true
} else {
false
}
x37
}
val x45 = if (x39) {
val x40 = x3()
val x43 = if (x40) {
true
} else {
val x41 = x1.cp = x27
false
}
x43
} else {
false
}
val x48 = if (x45) {
true
} else {
val x46 = x1.cp = x12
false
}
x48
} else {
false
}
val x53 = if (x50) {
true
} else {
val x51 = x1.cp = x11
false
}
val x513 = if (x53) {
true
} else {
val x58 = x1.cp
val x59 = x1.cp
val x60 = x1.cp
val x62 = x60 == x15
val x71 = if (x62) {
false
} else {
val x63 = x1.cp
val x64 = x14.charAt(x63)
val x65 = 'x' == x64
val x66 = if (x65) {
true
} else {
x65
}
val x69 = if (x66) {
val x67 = x1.cp += 1
true
} else {
false
}
x69
}
val x84 = if (x71) {
val x72 = x1.cp
val x73 = RhinoMatchUtil.flatNMatcher(x1,8,3,x14,x15) // 00-
val x79 = if (x73) {
val x74 = x3()
val x77 = if (x74) {
true
} else {
val x75 = x1.cp = x72
false
}
x77
} else {
false
}
val x82 = if (x79) {
true
} else {
val x80 = x1.cp = x59
false
}
x82
} else {
false
}
val x87 = if (x84) {
true
} else {
val x85 = x1.cp = x58
false
}
val x511 = if (x87) {
true
} else {
val x92 = x1.cp
val x93 = x1.cp
val x94 = x1.cp
val x96 = x94 == x15
val x105 = if (x96) {
false
} else {
val x97 = x1.cp
val x98 = x14.charAt(x97)
val x99 = 'x' == x98
val x100 = if (x99) {
true
} else {
x99
}
val x103 = if (x100) {
val x101 = x1.cp += 1
true
} else {
false
}
x103
}
val x118 = if (x105) {
val x106 = x1.cp
val x107 = RhinoMatchUtil.flatNMatcher(x1,14,2,x14,x15) // 1f
val x113 = if (x107) {
val x108 = x3()
val x111 = if (x108) {
true
} else {
val x109 = x1.cp = x106
false
}
x111
} else {
false
}
val x116 = if (x113) {
true
} else {
val x114 = x1.cp = x93
false
}
x116
} else {
false
}
val x121 = if (x118) {
true
} else {
val x119 = x1.cp = x92
false
}
val x509 = if (x121) {
true
} else {
val x126 = x1.cp
val x127 = x1.cp
val x128 = x1.cp
val x130 = x128 == x15
val x139 = if (x130) {
false
} else {
val x131 = x1.cp
val x132 = x14.charAt(x131)
val x133 = 'x' == x132
val x134 = if (x133) {
true
} else {
x133
}
val x137 = if (x134) {
val x135 = x1.cp += 1
true
} else {
false
}
x137
}
val x152 = if (x139) {
val x140 = x1.cp
val x141 = RhinoMatchUtil.flatNMatcher(x1,19,3,x14,x15) // 7f-
val x147 = if (x141) {
val x142 = x3()
val x145 = if (x142) {
true
} else {
val x143 = x1.cp = x140
false
}
x145
} else {
false
}
val x150 = if (x147) {
true
} else {
val x148 = x1.cp = x127
false
}
x150
} else {
false
}
val x155 = if (x152) {
true
} else {
val x153 = x1.cp = x126
false
}
val x507 = if (x155) {
true
} else {
val x160 = x1.cp
val x161 = x1.cp
val x162 = x1.cp
val x164 = x162 == x15
val x173 = if (x164) {
false
} else {
val x165 = x1.cp
val x166 = x14.charAt(x165)
val x167 = 'x' == x166
val x168 = if (x167) {
true
} else {
x167
}
val x171 = if (x168) {
val x169 = x1.cp += 1
true
} else {
false
}
x171
}
val x186 = if (x173) {
val x174 = x1.cp
val x175 = RhinoMatchUtil.flatNMatcher(x1,25,2,x14,x15) // 9f
val x181 = if (x175) {
val x176 = x3()
val x179 = if (x176) {
true
} else {
val x177 = x1.cp = x174
false
}
x179
} else {
false
}
val x184 = if (x181) {
true
} else {
val x182 = x1.cp = x161
false
}
x184
} else {
false
}
val x189 = if (x186) {
true
} else {
val x187 = x1.cp = x160
false
}
val x505 = if (x189) {
true
} else {
val x194 = x1.cp
val x195 = x1.cp
val x197 = x195 == x15
val x206 = if (x197) {
false
} else {
val x198 = x1.cp
val x199 = x14.charAt(x198)
val x200 = '?' == x199
val x201 = if (x200) {
true
} else {
x200
}
val x204 = if (x201) {
val x202 = x1.cp += 1
true
} else {
false
}
x204
}
val x212 = if (x206) {
val x207 = x3()
val x210 = if (x207) {
true
} else {
val x208 = x1.cp = x194
false
}
x210
} else {
false
}
val x503 = if (x212) {
true
} else {
val x217 = x1.cp
val x218 = RhinoMatchUtil.flatNMatcher(x1,30,2,x14,x15) // ?-
val x224 = if (x218) {
val x219 = x3()
val x222 = if (x219) {
true
} else {
val x220 = x1.cp = x217
false
}
x222
} else {
false
}
val x501 = if (x224) {
true
} else {
val x229 = x1.cp
val x230 = x1.cp
val x232 = x230 == x15
val x241 = if (x232) {
false
} else {
val x233 = x1.cp
val x234 = x14.charAt(x233)
val x235 = '?' == x234
val x236 = if (x235) {
true
} else {
x235
}
val x239 = if (x236) {
val x237 = x1.cp += 1
true
} else {
false
}
x239
}
val x247 = if (x241) {
val x242 = x3()
val x245 = if (x242) {
true
} else {
val x243 = x1.cp = x229
false
}
x245
} else {
false
}
val x499 = if (x247) {
true
} else {
val x252 = x1.cp
val x253 = x1.cp
val x255 = x253 == x15
val x264 = if (x255) {
false
} else {
val x256 = x1.cp
val x257 = x14.charAt(x256)
val x258 = '?' == x257
val x259 = if (x258) {
true
} else {
x258
}
val x262 = if (x259) {
val x260 = x1.cp += 1
true
} else {
false
}
x262
}
val x270 = if (x264) {
val x265 = x3()
val x268 = if (x265) {
true
} else {
val x266 = x1.cp = x252
false
}
x268
} else {
false
}
val x497 = if (x270) {
true
} else {
val x275 = x1.cp
val x276 = x1.cp
val x278 = x276 == x15
val x287 = if (x278) {
false
} else {
val x279 = x1.cp
val x280 = x14.charAt(x279)
val x281 = '?' == x280
val x282 = if (x281) {
true
} else {
x281
}
val x285 = if (x282) {
val x283 = x1.cp += 1
true
} else {
false
}
x285
}
val x293 = if (x287) {
val x288 = x3()
val x291 = if (x288) {
true
} else {
val x289 = x1.cp = x275
false
}
x291
} else {
false
}
val x495 = if (x293) {
true
} else {
val x298 = x1.cp
val x299 = x1.cp
val x301 = x299 == x15
val x310 = if (x301) {
false
} else {
val x302 = x1.cp
val x303 = x14.charAt(x302)
val x304 = '?' == x303
val x305 = if (x304) {
true
} else {
x304
}
val x308 = if (x305) {
val x306 = x1.cp += 1
true
} else {
false
}
x308
}
val x316 = if (x310) {
val x311 = x3()
val x314 = if (x311) {
true
} else {
val x312 = x1.cp = x298
false
}
x314
} else {
false
}
val x493 = if (x316) {
true
} else {
val x321 = x1.cp
val x322 = RhinoMatchUtil.flatNMatcher(x1,41,2,x14,x15) // ?-
val x328 = if (x322) {
val x323 = x3()
val x326 = if (x323) {
true
} else {
val x324 = x1.cp = x321
false
}
x326
} else {
false
}
val x491 = if (x328) {
true
} else {
val x333 = x1.cp
val x334 = x1.cp
val x336 = x334 == x15
val x345 = if (x336) {
false
} else {
val x337 = x1.cp
val x338 = x14.charAt(x337)
val x339 = '?' == x338
val x340 = if (x339) {
true
} else {
x339
}
val x343 = if (x340) {
val x341 = x1.cp += 1
true
} else {
false
}
x343
}
val x351 = if (x345) {
val x346 = x3()
val x349 = if (x346) {
true
} else {
val x347 = x1.cp = x333
false
}
x349
} else {
false
}
val x489 = if (x351) {
true
} else {
val x356 = x1.cp
val x357 = RhinoMatchUtil.flatNMatcher(x1,46,2,x14,x15) // ?-
val x363 = if (x357) {
val x358 = x3()
val x361 = if (x358) {
true
} else {
val x359 = x1.cp = x356
false
}
x361
} else {
false
}
val x487 = if (x363) {
true
} else {
val x368 = x1.cp
val x369 = x1.cp
val x371 = x369 == x15
val x380 = if (x371) {
false
} else {
val x372 = x1.cp
val x373 = x14.charAt(x372)
val x374 = '?' == x373
val x375 = if (x374) {
true
} else {
x374
}
val x378 = if (x375) {
val x376 = x1.cp += 1
true
} else {
false
}
x378
}
val x386 = if (x380) {
val x381 = x3()
val x384 = if (x381) {
true
} else {
val x382 = x1.cp = x368
false
}
x384
} else {
false
}
val x485 = if (x386) {
true
} else {
val x391 = x1.cp
val x392 = RhinoMatchUtil.flatNMatcher(x1,51,2,x14,x15) // ?-
val x398 = if (x392) {
val x393 = x3()
val x396 = if (x393) {
true
} else {
val x394 = x1.cp = x391
false
}
x396
} else {
false
}
val x483 = if (x398) {
true
} else {
val x403 = x1.cp
val x404 = x1.cp
val x406 = x404 == x15
val x415 = if (x406) {
false
} else {
val x407 = x1.cp
val x408 = x14.charAt(x407)
val x409 = '?' == x408
val x410 = if (x409) {
true
} else {
x409
}
val x413 = if (x410) {
val x411 = x1.cp += 1
true
} else {
false
}
x413
}
val x421 = if (x415) {
val x416 = x3()
val x419 = if (x416) {
true
} else {
val x417 = x1.cp = x403
false
}
x419
} else {
false
}
val x481 = if (x421) {
true
} else {
val x426 = x1.cp
val x427 = x1.cp
val x429 = x427 == x15
val x438 = if (x429) {
false
} else {
val x430 = x1.cp
val x431 = x14.charAt(x430)
val x432 = '?' == x431
val x433 = if (x432) {
true
} else {
x432
}
val x436 = if (x433) {
val x434 = x1.cp += 1
true
} else {
false
}
x436
}
val x444 = if (x438) {
val x439 = x3()
val x442 = if (x439) {
true
} else {
val x440 = x1.cp = x426
false
}
x442
} else {
false
}
val x479 = if (x444) {
true
} else {
val x449 = x1.cp
val x450 = RhinoMatchUtil.flatNMatcher(x1,58,2,x14,x15) // ?-
val x456 = if (x450) {
val x451 = x3()
val x454 = if (x451) {
true
} else {
val x452 = x1.cp = x449
false
}
x454
} else {
false
}
val x477 = if (x456) {
true
} else {
val x457 = x1.cp
val x458 = x1.cp
val x460 = x458 == x15
val x469 = if (x460) {
false
} else {
val x461 = x1.cp
val x462 = x14.charAt(x461)
val x463 = '?' == x462
val x464 = if (x463) {
true
} else {
x463
}
val x467 = if (x464) {
val x465 = x1.cp += 1
true
} else {
false
}
x467
}
val x475 = if (x469) {
val x470 = x3()
val x473 = if (x470) {
true
} else {
val x471 = x1.cp = x457
false
}
x473
} else {
false
}
x475
}
x477
}
x479
}
x481
}
x483
}
x485
}
x487
}
x489
}
x491
}
x493
}
x495
}
x497
}
x499
}
x501
}
x503
}
x505
}
x507
}
x509
}
x511
}
x513
}
}
/*****************************************
  End of Generated Code                  
*******************************************/

compilation: ok
---- took 1129ms
null
done
