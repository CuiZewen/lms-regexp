(\\\"|\x00-|\x1f|\x7f-|\x9f|?|?-|?|?|?|?|?-|?|?-|?|?-|?|?|?-|?) @ GnoThvq
null
----(\\\"|\x00-|\x1f|\x7f-|\x9f|?|?-|?|?|?|?|?-|?|?-|?|?-|?|?|?-|?)
/*****************************************
  Emitting Generated Code                  
*******************************************/
import scala.virtualization.lms.regexp._
import RhinoMatcher.matcher
class staged$6 extends ((Unit)=>(Boolean)) {
def apply(x0:Unit): Boolean = {
val x1 = matcher.gData
val x2 = x1.cp
val x3 = x1.cp
val x4 = if (x1.parens == null) null else x1.parens.clone //copy
val x650 = if (x1.parens == null) null else x1.parens.clone //copy
val x651 = x1.cp
val x652 = x1.cp
val x234 = matcher.input
val x235 = x234.length
val x654 = x652 == x235
val x663 = if (x654) {
false
} else {
val x655 = x1.cp
val x656 = x234.charAt(x655)
val x657 = '\\' == x656
val x658 = if (x657) {
true
} else {
x657
}
val x661 = if (x658) {
val x659 = x1.cp += 1
true
} else {
false
}
x661
}
def x5(): Boolean = {
val x7 = x1.cp
val x8 = x7 - x2
val x9 = x1.setParens(0,x2,x8)
true
}
def x13(): Boolean = {
val x15 = x1.cp = x3
val x16 = x1.parens = x4
val x17 = x1.cp
val x18 = if (x1.parens == null) null else x1.parens.clone //copy
val x610 = if (x1.parens == null) null else x1.parens.clone //copy
val x611 = x1.cp
val x612 = x1.cp
val x614 = x612 == x235
val x623 = if (x614) {
false
} else {
val x615 = x1.cp
val x616 = x234.charAt(x615)
val x617 = 'x' == x616
val x618 = if (x617) {
true
} else {
x617
}
val x621 = if (x618) {
val x619 = x1.cp += 1
true
} else {
false
}
x621
}
def x25(): Boolean = {
val x27 = x1.cp = x17
val x28 = x1.parens = x18
val x29 = x1.cp
val x30 = if (x1.parens == null) null else x1.parens.clone //copy
val x570 = if (x1.parens == null) null else x1.parens.clone //copy
val x571 = x1.cp
val x572 = x1.cp
val x574 = x572 == x235
val x583 = if (x574) {
false
} else {
val x575 = x1.cp
val x576 = x234.charAt(x575)
val x577 = 'x' == x576
val x578 = if (x577) {
true
} else {
x577
}
val x581 = if (x578) {
val x579 = x1.cp += 1
true
} else {
false
}
x581
}
def x37(): Boolean = {
val x39 = x1.cp = x29
val x40 = x1.parens = x30
val x41 = x1.cp
val x42 = if (x1.parens == null) null else x1.parens.clone //copy
val x530 = if (x1.parens == null) null else x1.parens.clone //copy
val x531 = x1.cp
val x532 = x1.cp
val x534 = x532 == x235
val x543 = if (x534) {
false
} else {
val x535 = x1.cp
val x536 = x234.charAt(x535)
val x537 = 'x' == x536
val x538 = if (x537) {
true
} else {
x537
}
val x541 = if (x538) {
val x539 = x1.cp += 1
true
} else {
false
}
x541
}
def x49(): Boolean = {
val x51 = x1.cp = x41
val x52 = x1.parens = x42
val x53 = x1.cp
val x54 = if (x1.parens == null) null else x1.parens.clone //copy
val x490 = if (x1.parens == null) null else x1.parens.clone //copy
val x491 = x1.cp
val x492 = x1.cp
val x494 = x492 == x235
val x503 = if (x494) {
false
} else {
val x495 = x1.cp
val x496 = x234.charAt(x495)
val x497 = 'x' == x496
val x498 = if (x497) {
true
} else {
x497
}
val x501 = if (x498) {
val x499 = x1.cp += 1
true
} else {
false
}
x501
}
def x61(): Boolean = {
val x63 = x1.cp = x53
val x64 = x1.parens = x54
val x65 = x1.cp
val x66 = if (x1.parens == null) null else x1.parens.clone //copy
val x469 = x1.cp
val x471 = x469 == x235
val x480 = if (x471) {
false
} else {
val x472 = x1.cp
val x473 = x234.charAt(x472)
val x474 = '?' == x473
val x475 = if (x474) {
true
} else {
x474
}
val x478 = if (x475) {
val x476 = x1.cp += 1
true
} else {
false
}
x478
}
def x73(): Boolean = {
val x75 = x1.cp = x65
val x76 = x1.parens = x66
val x77 = x1.cp
val x78 = if (x1.parens == null) null else x1.parens.clone //copy
val x459 = RhinoMatchUtil.flatNMatcher(x1,30,2,x234,x235) // ?-
def x85(): Boolean = {
val x87 = x1.cp = x77
val x88 = x1.parens = x78
val x89 = x1.cp
val x90 = if (x1.parens == null) null else x1.parens.clone //copy
val x438 = x1.cp
val x440 = x438 == x235
val x449 = if (x440) {
false
} else {
val x441 = x1.cp
val x442 = x234.charAt(x441)
val x443 = '?' == x442
val x444 = if (x443) {
true
} else {
x443
}
val x447 = if (x444) {
val x445 = x1.cp += 1
true
} else {
false
}
x447
}
def x97(): Boolean = {
val x99 = x1.cp = x89
val x100 = x1.parens = x90
val x101 = x1.cp
val x102 = if (x1.parens == null) null else x1.parens.clone //copy
val x417 = x1.cp
val x419 = x417 == x235
val x428 = if (x419) {
false
} else {
val x420 = x1.cp
val x421 = x234.charAt(x420)
val x422 = '?' == x421
val x423 = if (x422) {
true
} else {
x422
}
val x426 = if (x423) {
val x424 = x1.cp += 1
true
} else {
false
}
x426
}
def x109(): Boolean = {
val x111 = x1.cp = x101
val x112 = x1.parens = x102
val x113 = x1.cp
val x114 = if (x1.parens == null) null else x1.parens.clone //copy
val x396 = x1.cp
val x398 = x396 == x235
val x407 = if (x398) {
false
} else {
val x399 = x1.cp
val x400 = x234.charAt(x399)
val x401 = '?' == x400
val x402 = if (x401) {
true
} else {
x401
}
val x405 = if (x402) {
val x403 = x1.cp += 1
true
} else {
false
}
x405
}
def x121(): Boolean = {
val x123 = x1.cp = x113
val x124 = x1.parens = x114
val x125 = x1.cp
val x126 = if (x1.parens == null) null else x1.parens.clone //copy
val x375 = x1.cp
val x377 = x375 == x235
val x386 = if (x377) {
false
} else {
val x378 = x1.cp
val x379 = x234.charAt(x378)
val x380 = '?' == x379
val x381 = if (x380) {
true
} else {
x380
}
val x384 = if (x381) {
val x382 = x1.cp += 1
true
} else {
false
}
x384
}
def x133(): Boolean = {
val x135 = x1.cp = x125
val x136 = x1.parens = x126
val x137 = x1.cp
val x138 = if (x1.parens == null) null else x1.parens.clone //copy
val x365 = RhinoMatchUtil.flatNMatcher(x1,41,2,x234,x235) // ?-
def x145(): Boolean = {
val x147 = x1.cp = x137
val x148 = x1.parens = x138
val x149 = x1.cp
val x150 = if (x1.parens == null) null else x1.parens.clone //copy
val x344 = x1.cp
val x346 = x344 == x235
val x355 = if (x346) {
false
} else {
val x347 = x1.cp
val x348 = x234.charAt(x347)
val x349 = '?' == x348
val x350 = if (x349) {
true
} else {
x349
}
val x353 = if (x350) {
val x351 = x1.cp += 1
true
} else {
false
}
x353
}
def x157(): Boolean = {
val x159 = x1.cp = x149
val x160 = x1.parens = x150
val x161 = x1.cp
val x162 = if (x1.parens == null) null else x1.parens.clone //copy
val x334 = RhinoMatchUtil.flatNMatcher(x1,46,2,x234,x235) // ?-
def x169(): Boolean = {
val x171 = x1.cp = x161
val x172 = x1.parens = x162
val x173 = x1.cp
val x174 = if (x1.parens == null) null else x1.parens.clone //copy
val x313 = x1.cp
val x315 = x313 == x235
val x324 = if (x315) {
false
} else {
val x316 = x1.cp
val x317 = x234.charAt(x316)
val x318 = '?' == x317
val x319 = if (x318) {
true
} else {
x318
}
val x322 = if (x319) {
val x320 = x1.cp += 1
true
} else {
false
}
x322
}
def x181(): Boolean = {
val x183 = x1.cp = x173
val x184 = x1.parens = x174
val x185 = x1.cp
val x186 = if (x1.parens == null) null else x1.parens.clone //copy
val x303 = RhinoMatchUtil.flatNMatcher(x1,51,2,x234,x235) // ?-
def x193(): Boolean = {
val x195 = x1.cp = x185
val x196 = x1.parens = x186
val x197 = x1.cp
val x198 = if (x1.parens == null) null else x1.parens.clone //copy
val x282 = x1.cp
val x284 = x282 == x235
val x293 = if (x284) {
false
} else {
val x285 = x1.cp
val x286 = x234.charAt(x285)
val x287 = '?' == x286
val x288 = if (x287) {
true
} else {
x287
}
val x291 = if (x288) {
val x289 = x1.cp += 1
true
} else {
false
}
x291
}
def x205(): Boolean = {
val x207 = x1.cp = x197
val x208 = x1.parens = x198
val x209 = x1.cp
val x210 = if (x1.parens == null) null else x1.parens.clone //copy
val x261 = x1.cp
val x263 = x261 == x235
val x272 = if (x263) {
false
} else {
val x264 = x1.cp
val x265 = x234.charAt(x264)
val x266 = '?' == x265
val x267 = if (x266) {
true
} else {
x266
}
val x270 = if (x267) {
val x268 = x1.cp += 1
true
} else {
false
}
x270
}
def x217(): Boolean = {
val x219 = x1.cp = x209
val x220 = x1.parens = x210
val x221 = x1.cp
val x222 = if (x1.parens == null) null else x1.parens.clone //copy
val x251 = RhinoMatchUtil.flatNMatcher(x1,58,2,x234,x235) // ?-
def x229(): Boolean = {
val x231 = x1.cp = x221
val x232 = x1.parens = x222
val x233 = x1.cp
val x237 = x233 == x235
val x246 = if (x237) {
false
} else {
val x238 = x1.cp
val x239 = x234.charAt(x238)
val x240 = '?' == x239
val x241 = if (x240) {
true
} else {
x240
}
val x244 = if (x241) {
val x242 = x1.cp += 1
true
} else {
false
}
x244
}
val x249 = if (x246) {
val x247 = x5()
x247
} else {
false
}
x249
}
val x259 = if (x251) {
val x252 = x5()
val x255 = if (x252) {
true
} else {
val x253 = x229()
x253
}
x255
} else {
val x257 = x229()
x257
}
x259
}
val x280 = if (x272) {
val x273 = x5()
val x276 = if (x273) {
true
} else {
val x274 = x217()
x274
}
x276
} else {
val x278 = x217()
x278
}
x280
}
val x301 = if (x293) {
val x294 = x5()
val x297 = if (x294) {
true
} else {
val x295 = x205()
x295
}
x297
} else {
val x299 = x205()
x299
}
x301
}
val x311 = if (x303) {
val x304 = x5()
val x307 = if (x304) {
true
} else {
val x305 = x193()
x305
}
x307
} else {
val x309 = x193()
x309
}
x311
}
val x332 = if (x324) {
val x325 = x5()
val x328 = if (x325) {
true
} else {
val x326 = x181()
x326
}
x328
} else {
val x330 = x181()
x330
}
x332
}
val x342 = if (x334) {
val x335 = x5()
val x338 = if (x335) {
true
} else {
val x336 = x169()
x336
}
x338
} else {
val x340 = x169()
x340
}
x342
}
val x363 = if (x355) {
val x356 = x5()
val x359 = if (x356) {
true
} else {
val x357 = x157()
x357
}
x359
} else {
val x361 = x157()
x361
}
x363
}
val x373 = if (x365) {
val x366 = x5()
val x369 = if (x366) {
true
} else {
val x367 = x145()
x367
}
x369
} else {
val x371 = x145()
x371
}
x373
}
val x394 = if (x386) {
val x387 = x5()
val x390 = if (x387) {
true
} else {
val x388 = x133()
x388
}
x390
} else {
val x392 = x133()
x392
}
x394
}
val x415 = if (x407) {
val x408 = x5()
val x411 = if (x408) {
true
} else {
val x409 = x121()
x409
}
x411
} else {
val x413 = x121()
x413
}
x415
}
val x436 = if (x428) {
val x429 = x5()
val x432 = if (x429) {
true
} else {
val x430 = x109()
x430
}
x432
} else {
val x434 = x109()
x434
}
x436
}
val x457 = if (x449) {
val x450 = x5()
val x453 = if (x450) {
true
} else {
val x451 = x97()
x451
}
x453
} else {
val x455 = x97()
x455
}
x457
}
val x467 = if (x459) {
val x460 = x5()
val x463 = if (x460) {
true
} else {
val x461 = x85()
x461
}
x463
} else {
val x465 = x85()
x465
}
x467
}
val x488 = if (x480) {
val x481 = x5()
val x484 = if (x481) {
true
} else {
val x482 = x73()
x482
}
x484
} else {
val x486 = x73()
x486
}
x488
}
def x505(): Boolean = {
val x507 = x5()
val x510 = if (x507) {
true
} else {
val x508 = x61()
x508
}
x510
}
val x528 = if (x503) {
val x504 = RhinoMatchUtil.flatNMatcher(x1,25,2,x234,x235) // 9f
val x522 = if (x504) {
val x512 = x505()
x512
} else {
val x514 = x1.parens = x490
val x515 = x1.cp = x491
val x520 = x61()
x520
}
x522
} else {
val x524 = x1.parens = x490
val x525 = x1.cp = x491
val x526 = x61()
x526
}
x528
}
def x545(): Boolean = {
val x547 = x5()
val x550 = if (x547) {
true
} else {
val x548 = x49()
x548
}
x550
}
val x568 = if (x543) {
val x544 = RhinoMatchUtil.flatNMatcher(x1,19,3,x234,x235) // 7f-
val x562 = if (x544) {
val x552 = x545()
x552
} else {
val x554 = x1.parens = x530
val x555 = x1.cp = x531
val x560 = x49()
x560
}
x562
} else {
val x564 = x1.parens = x530
val x565 = x1.cp = x531
val x566 = x49()
x566
}
x568
}
def x585(): Boolean = {
val x587 = x5()
val x590 = if (x587) {
true
} else {
val x588 = x37()
x588
}
x590
}
val x608 = if (x583) {
val x584 = RhinoMatchUtil.flatNMatcher(x1,14,2,x234,x235) // 1f
val x602 = if (x584) {
val x592 = x585()
x592
} else {
val x594 = x1.parens = x570
val x595 = x1.cp = x571
val x600 = x37()
x600
}
x602
} else {
val x604 = x1.parens = x570
val x605 = x1.cp = x571
val x606 = x37()
x606
}
x608
}
def x625(): Boolean = {
val x627 = x5()
val x630 = if (x627) {
true
} else {
val x628 = x25()
x628
}
x630
}
val x648 = if (x623) {
val x624 = RhinoMatchUtil.flatNMatcher(x1,8,3,x234,x235) // 00-
val x642 = if (x624) {
val x632 = x625()
x632
} else {
val x634 = x1.parens = x610
val x635 = x1.cp = x611
val x640 = x25()
x640
}
x642
} else {
val x644 = x1.parens = x610
val x645 = x1.cp = x611
val x646 = x25()
x646
}
x648
}
def x676(): Boolean = {
val x678 = x5()
val x681 = if (x678) {
true
} else {
val x679 = x13()
x679
}
x681
}
val x699 = if (x663) {
val x664 = x1.cp
val x666 = x664 == x235
val x675 = if (x666) {
false
} else {
val x667 = x1.cp
val x668 = x234.charAt(x667)
val x669 = '"' == x668
val x670 = if (x669) {
true
} else {
x669
}
val x673 = if (x670) {
val x671 = x1.cp += 1
true
} else {
false
}
x673
}
val x693 = if (x675) {
val x683 = x676()
x683
} else {
val x685 = x1.parens = x650
val x686 = x1.cp = x651
val x691 = x13()
x691
}
x693
} else {
val x695 = x1.parens = x650
val x696 = x1.cp = x651
val x697 = x13()
x697
}
x699
}
}
/*****************************************
  End of Generated Code                  
*******************************************/

compilation: ok
---- took 1289ms
null
done
