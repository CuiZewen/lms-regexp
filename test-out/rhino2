\w*b @ aaabc
REGlobalData(0,4 / null)/aaab
----\w*b
/*****************************************
  Emitting Generated Code                  
*******************************************/
import scala.virtualization.lms.regexp._
import RhinoMatcher.matcher
class staged$1 extends ((Unit)=>(Boolean)) {
def apply(x0:Unit): Boolean = {
val x1 = matcher.gData
val x7 = matcher.input
val x8 = x7.length
val x2 = if (x1.parens == null) null else x1.parens.clone //copy
val x3 = x1.cp
def x4(): Boolean = {
val x6 = x1.cp
val x10 = x6 == x8
val x19 = if (x10) {
false
} else {
val x11 = x1.cp
val x12 = x7.charAt(x11)
val x13 = 'b' == x12
val x14 = if (x13) {
true
} else {
x13
}
val x17 = if (x14) {
val x15 = x1.cp += 1
true
} else {
false
}
x17
}
val x27 = if (x19) {
true
} else {
val x22 = x1.parens = x2
val x23 = x1.cp = x3
false
}
x27
}
def x36(): Boolean = {
val x38 = if (x1.parens == null) null else x1.parens.clone //copy
val x39 = x1.cp
val x40 = x1.cp
val x42 = x40 == x8
val x47 = if (x42) {
false
} else {
val x43 = x1.cp
val x44 = x7.charAt(x43)
val x45 = Rhino.isWord(x44)
x45
}
val x50 = if (x47) {
val x48 = x1.cp += 1
true
} else {
false
}
val x62 = if (x50) {
val x51 = x36()
val x56 = if (x51) {
true
} else {
val x52 = x1.cp = x39
val x53 = x1.parens = x38
val x54 = x4()
x54
}
x56
} else {
val x58 = x1.cp = x39
val x59 = x1.parens = x38
val x60 = x4()
x60
}
x62
}
val x34 = if (x1.parens == null) null else x1.parens.clone //copy
val x35 = x1.cp
val x64 = x36()
x64
}
}
/*****************************************
  End of Generated Code                  
*******************************************/

compilation: ok
---- took 212ms
REGlobalData(0,4 / null)/aaab
done
