\w*b @ aaabc
REGlobalData(0,4 / null)/aaab
----\w*b
/*****************************************
  Emitting Generated Code                  
*******************************************/
import scala.virtualization.lms.regexp._
import RhinoMatcher.matcher
class staged$1 extends ((Unit)=>(Boolean)) {
def apply(x0:Unit): Boolean = {
val x1 = matcher.gData
val x9 = matcher.input
val x10 = x9.length
val x2 = if (x1.parens == null) null else x1.parens.clone //copy
val x3 = x1.cp
def x28(): Boolean = {
val x30 = x1.cp
val x32 = x30 == x10
val x41 = if (x32) {
false
} else {
val x33 = x1.cp
val x34 = x9.charAt(x33)
val x35 = 'b' == x34
val x36 = if (x35) {
true
} else {
x35
}
val x39 = if (x36) {
val x37 = x1.cp += 1
true
} else {
false
}
x39
}
val x49 = if (x41) {
true
} else {
val x44 = x1.parens = x2
val x45 = x1.cp = x3
false
}
x49
}
def x53(): Boolean = {
val x55 = x1.parens = x2
val x56 = x1.cp = x3
false
}
def x4(x5: (Int)): Boolean = {
val x6 = if (x1.parens == null) null else x1.parens.clone //copy
val x7 = x1.cp
val x8 = x1.cp
val x12 = x8 == x10
val x17 = if (x12) {
false
} else {
val x13 = x1.cp
val x14 = x9.charAt(x13)
val x15 = Rhino.isWord(x14)
x15
}
val x20 = if (x17) {
val x18 = x1.cp += 1
true
} else {
false
}
val x24 = if (x20) {
val x21 = x5 + 1
val x22 = x4(x21)
x22
} else {
false
}
val x62 = if (x24) {
true
} else {
val x25 = x1.parens = x6
val x26 = x1.cp = x7
val x27 = x5 >= 0
val x60 = if (x27) {
val x51 = x28()
x51
} else {
val x58 = x53()
x58
}
x60
}
x62
}
val x64 = x4(0)
x64
}
}
/*****************************************
  End of Generated Code                  
*******************************************/

compilation: ok
---- took 260ms
REGlobalData(0,4 / null)/aaab
done
